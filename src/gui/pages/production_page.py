"""
Page de production - Dashboard Trading
Interface optimis√©e selon les sp√©cifications utilisateur
"""

import json
import time
from datetime import datetime, timedelta, timezone
from pathlib import Path

import numpy as np
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import requests
import streamlit as st
from loguru import logger

from src.constants import CONSTANTS
from src.gui.services.chart_service import ChartService
from src.gui.services.data_monitor_service import DataMonitorService
from src.gui.services.data_service import DataService
from src.gui.services.decision_validation_service import DecisionValidationService
from src.gui.services.fusion_service import FusionService
from src.gui.services.llm_service import LLMService
from src.gui.services.monitoring_service import MonitoringService
from src.gui.services.prediction_service import PredictionService
from src.gui.services.sentiment_service import SentimentService


def show_production_page():
    """Affiche la page de production optimis√©e"""

    # Initialiser les services
    if "production_services" not in st.session_state:
        st.session_state.production_services = {
            "data_service": DataService(),
            "chart_service": ChartService(),
            "prediction_service": PredictionService(),
            "sentiment_service": SentimentService(),
            "fusion_service": FusionService(),
            "llm_service": LLMService(),
            "monitoring_service": MonitoringService(),
            "data_monitor_service": DataMonitorService(),
        }

    # Cache pour les pr√©dictions LSTM (√©viter de recalculer √† chaque fois)
    if "prediction_cache" not in st.session_state:
        st.session_state.prediction_cache = {}

    services = st.session_state.production_services

    # CSS personnalis√© optimis√©
    st.markdown(
        """
    <style>
        .feature-card {
            background: white;
            padding: 1.5rem;
            border-radius: 15px;
            margin: 1rem 0;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
            transition: transform 0.2s;
        }
        .feature-card:hover {
            transform: translateY(-2px);
        }
        .price-card {
            background: linear-gradient(135deg, #d4edda 0%, #c3e6cb 100%);
        }
        .sentiment-card {
            background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%);
        }
        .fusion-card {
            background: linear-gradient(135deg, #e2e3f0 0%, #d1d5f0 100%);
        }
        .llm-card {
            background: linear-gradient(135deg, #d1ecf1 0%, #bee5eb 100%);
        }
        .monitoring-card {
            background: linear-gradient(135deg, #f8d7da 0%, #f5c6cb 100%);
        }
        .status-indicator {
            display: inline-block;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 8px;
        }
        .status-online { background-color: #28a745; }
        .status-offline { background-color: #dc3545; }
        .status-warning { background-color: #ffc107; }
        .gauge-container {
            text-align: center;
            padding: 1rem;
        }
        .recommendation-badge {
            display: inline-block;
            padding: 0.5rem 1rem;
            border-radius: 25px;
            font-weight: bold;
            font-size: 1.1rem;
        }
        .recommendation-buy {
            background-color: #28a745;
            color: white;
        }
        .recommendation-sell {
            background-color: #dc3545;
            color: white;
        }
        .recommendation-wait {
            background-color: #ffc107;
            color: #212529;
        }
        .action-buttons {
            display: flex;
            gap: 10px;
            margin-left: 20px;
        }
        .error-alert {
            background-color: #f8d7da;
            border: 1px solid #f5c6cb;
            color: #721c24;
            padding: 1rem;
            border-radius: 8px;
            margin: 1rem 0;
        }
        .market-status {
            text-align: center;
            padding: 1rem;
            border-radius: 10px;
            margin: 1rem 0;
        }
        .market-open {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        .market-closed {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        .service-card {
            background: white;
            padding: 1rem;
            border-radius: 8px;
            text-align: center;
            margin: 0.5rem 0;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .service-card h6 {
            margin: 0 0 0.5rem 0;
            font-size: 0.9rem;
            color: #666;
        }
        .service-card p {
            margin: 0.25rem 0;
            font-size: 1rem;
        }
        .service-card small {
            color: #888;
            font-size: 0.8rem;
        }
        .status-line {
            background: #f8f9fa;
            padding: 1rem;
            border-radius: 8px;
            margin: 1rem 0;
            font-size: 1.1rem;
            text-align: center;
        }
        .timeline-container {
            background: #f8f9fa;
            padding: 1rem;
            border-radius: 8px;
            margin: 1rem 0;
        }
        .timeline-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.5rem 0;
            border-bottom: 1px solid #e9ecef;
        }
        .timeline-item:last-child {
            border-bottom: none;
        }
        .kpi-box {
            background: white;
            padding: 1rem;
            border-radius: 8px;
            text-align: center;
            margin: 0.5rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .kpi-value {
            font-size: 2rem;
            font-weight: bold;
            color: #667eea;
        }
        .kpi-label {
            font-size: 0.9rem;
            color: #666;
            margin-top: 0.5rem;
        }
    </style>
    """,
        unsafe_allow_html=True,
    )

    # Sidebar - Nettoy√©e selon demande
    with st.sidebar:
        st.header("‚öôÔ∏è Configuration Production")

        # Configuration simple
        ticker = st.selectbox(
            "Ticker",
            ["SPY", "NVDA"],
            index=0,
            help="Symbole de l'action √† analyser. SPY: Pr√©dictions disponibles. NVDA: Analyse uniquement.",
        )

        # P√©riode fixe √† 7 jours pour l'analyse
        period = "7 derniers jours"

        # Configuration des seuils adaptatifs
        st.subheader("üéØ Seuils Adaptatifs")

        # Afficher les seuils actuels
        fusion_stats = services["fusion_service"].get_fusion_stats()
        current_thresholds = fusion_stats.get("current_thresholds", {"buy": 0.1, "sell": -0.1})

        col1, col2 = st.columns(2)
        with col1:
            st.metric("Seuil BUY", f"{current_thresholds.get('buy', 0.1):.3f}", help="Signal > seuil ‚Üí ACHETER")
        with col2:
            st.metric("Seuil SELL", f"{current_thresholds.get('sell', -0.1):.3f}", help="Signal < seuil ‚Üí VENDRE")

        # Information sur l'adaptation
        st.info("üîÑ Les seuils s'adaptent automatiquement selon la volatilit√© du march√©")

        # Actions du syst√®me
        st.subheader("üéÆ Actions")

        col1, col2, col3 = st.columns(3)
        with col1:
            if st.button(
                "üöÄ D√©marrer Services",
                type="primary",
                key="start_services",
                help="D√©marre tous les services de trading (crawler, pr√©diction, sentiment, fusion)",
            ):
                st.success("‚úÖ Services d√©marr√©s")
                st.session_state.services_running = True
        with col2:
            if st.button(
                "üõë Arr√™ter Services",
                type="secondary",
                key="stop_services",
                help="Arr√™te tous les services de trading (simulation)",
            ):
                st.warning("‚ö†Ô∏è Services arr√™t√©s")
                st.session_state.services_running = False
        with col3:
            if st.button(
                "üîÑ Rafra√Æchir",
                type="secondary",
                key="refresh_page",
                help="Recharge la page et actualise tous les affichages",
            ):
                # Vider le cache de pr√©dictions
                st.session_state.prediction_cache = {}
                st.rerun()

        # Mise √† jour des donn√©es
        st.subheader("üìä Donn√©es")

        if st.button(
            "üìà Mettre √† jour les prix",
            type="secondary",
            key="update_prices",
            help="Met √† jour les donn√©es de prix 15min depuis l'API et recharge les graphiques",
        ):
            with st.spinner("Mise √† jour des donn√©es de prix..."):
                try:
                    # Utiliser le service de monitoring pour la mise √† jour
                    success = services["data_monitor_service"].trigger_data_refresh(ticker)

                    if success:
                        # Vider tous les caches Streamlit pour forcer le rechargement
                        st.cache_data.clear()
                        st.cache_resource.clear()
                        st.success("‚úÖ Donn√©es de prix mises √† jour")
                        st.rerun()  # Recharger pour voir les nouvelles donn√©es
                    else:
                        st.warning("‚ö†Ô∏è Mise √† jour partielle - V√©rifiez les logs")

                except Exception as e:
                    st.error(f"‚ùå Erreur lors de la mise √† jour: {e}")
                    st.info("‚ÑπÔ∏è Utilisation des donn√©es en cache")

        # Section d'aide
        st.subheader("‚ùì Aide")
        with st.expander("üí° Que font ces boutons ?", expanded=False):
            st.markdown(
                """
            **üéÆ Actions :**
            - **üöÄ D√©marrer Services** : Lance tous les services de trading (crawler, pr√©diction, sentiment, fusion)
            - **üõë Arr√™ter Services** : Arr√™te tous les services (simulation pour l'interface)
            - **üîÑ Rafra√Æchir** : Recharge la page et actualise tous les affichages
            
            **üìä Donn√©es :**
            - **üìà Mettre √† jour les prix** : Met √† jour les donn√©es de prix 15min depuis l'API et recharge les graphiques
            """
            )

    # 1. COMPTE RENDU D'ACTIVIT√â - Version restructur√©e en haut
    st.header("üìä Compte Rendu d'Activit√©")

    # V√©rification de l'√©tat du march√©
    market_status = _check_market_status()

    # V√©rification des d√©pendances critiques
    fusion_available, fusion_errors = _check_fusion_dependencies(services, ticker, market_status)

    # Affichage des erreurs centralis√©es - Un seul message par module
    if fusion_errors:
        critical_errors = [e for e in fusion_errors if e["severity"] == "critical"]
        if critical_errors:
            st.error(f"üö® **{critical_errors[0]['title']}** ‚Äì {critical_errors[0]['message']}")

    # Calculer fusion_data avant l'affichage des KPIs
    fusion_data = None
    if fusion_available:
        try:
            price_signal = _get_price_signal(services, ticker)
            sentiment_signal = _get_sentiment_signal(services, ticker)
            prediction_signal = _get_prediction_signal(services, ticker)

            fusion_data = services["fusion_service"].calculate_fusion_score(
                price_signal, sentiment_signal, prediction_signal
            )
        except Exception as e:
            st.error(f"Erreur calcul fusion: {e}")
            fusion_data = None

    # KPI principaux en haut - Ordre r√©organis√©
    col1, col2, col3, col4, col5 = st.columns(5)

    with col1:
        # 1. Statut march√©
        market_color = "#28a745" if market_status["is_open"] else "#dc3545"
        market_text = "Ouvert" if market_status["is_open"] else "Ferm√©"
        st.markdown(
            f"""
        <div class="kpi-box">
            <div class="kpi-value" style="color: {market_color};">{market_text}</div>
            <div class="kpi-label">March√©</div>
        </div>
        """,
            unsafe_allow_html=True,
        )

    with col2:
        # 2. Derni√®re MAJ + Prochain Update (fen√™tres fixes de 15 minutes)
        current_time = datetime.now().strftime("%H:%M:%S")
        next_decision_time = _get_next_decision_time()
        st.markdown(
            f"""
        <div class="kpi-box">
            <div class="kpi-value" style="color: #667eea;">{current_time}</div>
            <div class="kpi-label">Derni√®re MAJ</div>
            <div class="kpi-label" style="font-size: 0.8rem; color: #888; margin-top: 0.5rem;">Prochain: {next_decision_time}</div>
        </div>
        """,
            unsafe_allow_html=True,
        )

    with col3:
        # 3. Confiance avec tooltip
        if fusion_available and fusion_data:
            try:
                st.markdown(
                    f"""
                <div class="kpi-box" title="Niveau de confiance bas√© sur la coh√©rence des signaux (prix, sentiment, pr√©diction)">
                    <div class="kpi-value">{fusion_data['confidence']:.1%}</div>
                    <div class="kpi-label">Confiance</div>
                </div>
                """,
                    unsafe_allow_html=True,
                )
            except:
                st.markdown(
                    f"""
                <div class="kpi-box">
                    <div class="kpi-value" style="color: #dc3545;">N/A</div>
                    <div class="kpi-label">Confiance</div>
                </div>
                """,
                    unsafe_allow_html=True,
                )
        else:
            st.markdown(
                f"""
            <div class="kpi-box">
                <div class="kpi-value" style="color: #dc3545;">N/A</div>
                <div class="kpi-label">Confiance</div>
        </div>
        """,
                unsafe_allow_html=True,
            )

    with col4:
        # 4. Score de fusion avec d√©tails
        if fusion_available and fusion_data:
            try:
                st.markdown(
                    f"""
                <div class="kpi-box">
                    <div class="kpi-value">{fusion_data['fusion_score']:.2f}</div>
                    <div class="kpi-label">Score Fusion</div>
                    <div class="kpi-label" style="font-size: 0.7rem; color: #888; margin-top: 0.3rem;">
                        Prix: {price_signal:.2f} | News: {sentiment_signal:.2f}
                    </div>
                </div>
                """,
                    unsafe_allow_html=True,
                )
            except Exception as e:
                st.markdown(
                    f"""
                <div class="kpi-box">
                    <div class="kpi-value" style="color: #dc3545;">N/A</div>
                    <div class="kpi-label">Score Fusion</div>
                </div>
                """,
                    unsafe_allow_html=True,
                )
        else:
            st.markdown(
                f"""
            <div class="kpi-box">
                <div class="kpi-value" style="color: #dc3545;">N/A</div>
                <div class="kpi-label">Score Fusion</div>
            </div>
            """,
                unsafe_allow_html=True,
            )

    with col5:
        # 5. Recommandation - Afficher le dernier r√©sultat ou statut appropri√©
        if fusion_available and market_status["is_open"] and ticker == "SPY" and fusion_data:
            try:
                st.markdown(
                    f"""
                <div class="kpi-box">
                    <div class="kpi-value" style="color: {fusion_data['color']};">{fusion_data['recommendation']}</div>
                    <div class="kpi-label">Recommandation</div>
                </div>
                """,
                    unsafe_allow_html=True,
                )
            except:
                st.markdown(
                    f"""
                <div class="kpi-box">
                    <div class="kpi-value" style="color: #ffc107;">En cours</div>
                    <div class="kpi-label">Recommandation</div>
                </div>
                """,
                    unsafe_allow_html=True,
                )
        elif ticker == "NVDA":
            st.markdown(
                f"""
            <div class="kpi-box">
                <div class="kpi-value" style="color: #ffc107;">Analyse</div>
                <div class="kpi-label">Recommandation</div>
                <div class="kpi-label" style="font-size: 0.8rem; color: #888;">NVDA: Analyse uniquement</div>
            </div>
            """,
                unsafe_allow_html=True,
            )
        else:
            st.markdown(
                f"""
            <div class="kpi-box">
                <div class="kpi-value" style="color: #ffc107;">En attente</div>
                <div class="kpi-label">Recommandation</div>
                <div class="kpi-label" style="font-size: 0.8rem; color: #888;">Ouverture march√©</div>
            </div>
            """,
                unsafe_allow_html=True,
            )

    # 3. GRAPHIQUE 15MIN DU JOUR - Donn√©es r√©elles avec monitoring
    st.header("üìà Graphique 15min du Jour")

    # V√©rifier l'√©tat des donn√©es 15min
    data_summary = services["data_monitor_service"].get_data_summary(ticker)

    # Afficher le graphique si les donn√©es sont disponibles
    if data_summary.get("available", False):
        try:
            data_15min, metadata = services["data_monitor_service"].get_latest_15min_data(ticker)

            if not data_15min.empty:
                # Filtrer les donn√©es des 7 derniers jours
                seven_days_ago = datetime.now() - timedelta(days=7)
                # Cr√©er une copie pour √©viter le warning SettingWithCopyWarning
                data_15min_copy = data_15min.copy()
                # Convertir les timestamps en datetime naif pour la comparaison
                data_15min_copy = data_15min_copy.copy()
                data_15min_copy["ts_utc_naive"] = data_15min_copy["ts_utc"].apply(
                    lambda x: x.replace(tzinfo=None) if x.tzinfo is not None else x
                )
                data_recent = data_15min_copy[data_15min_copy["ts_utc_naive"] >= seven_days_ago].copy()

                if not data_recent.empty:
                    # Convertir UTC ‚Üí Paris pour l'affichage
                    import pytz
                    paris_tz = pytz.timezone('Europe/Paris')
                    data_recent["ts_paris"] = data_recent["ts_utc"].dt.tz_convert(paris_tz)

                    # Cr√©er le graphique 15min
                    fig = go.Figure()

                    fig.add_trace(
                        go.Scatter(
                            x=data_recent["ts_paris"],  # Utiliser heure de Paris
                            y=data_recent["close"],
                            mode="lines+markers",
                            name=f"{ticker} - Prix 15min",
                            line=dict(color="#1f77b4", width=2),
                            marker=dict(size=4),
                            hovertemplate="<b>%{fullData.name}</b><br>Heure (Paris): %{x}<br>Prix: $%{y:.2f}<extra></extra>",
                        )
                    )

                    # Ajouter les moyennes mobiles
                    if len(data_recent) > 20:
                        data_recent["ma_20"] = data_recent["close"].rolling(window=20).mean()
                        fig.add_trace(
                            go.Scatter(
                                x=data_recent["ts_paris"],  # Utiliser heure de Paris
                                y=data_recent["ma_20"],
                                mode="lines",
                                name="MA 20",
                                line=dict(color="#ff7f0e", width=1, dash="dash"),
                                hovertemplate="<b>MA 20</b><br>Heure (Paris): %{x}<br>Prix: $%{y:.2f}<extra></extra>",
                            )
                        )

                    fig.update_layout(
                        title=f"Prix {ticker} - 15min (7 derniers jours) - Heure de Paris",
                        xaxis_title="Heure (Paris)",
                        yaxis_title="Prix ($)",
                        showlegend=True,
                        hovermode="x unified",
                    )

                    st.plotly_chart(fig, config={"displayModeBar": False})

                    # Afficher les statistiques
                    col1, col2, col3, col4 = st.columns(4)
                    with col1:
                        st.metric("Dernier Prix", f"${data_recent['close'].iloc[-1]:.2f}")
                    with col2:
                        price_change = data_summary.get("price_change_24h", 0)
                        st.metric("Variation 24h", f"{price_change:+.2f}$")
                    with col3:
                        st.metric("Volume Moyen", f"{data_summary.get('volume_avg', 0):.0f}")
                    with col4:
                        st.metric("Total Records", f"{data_summary.get('total_records', 0)}")
                else:
                    st.info("Aucune donn√©e 15min r√©cente disponible")
            else:
                st.warning("Donn√©es 15min vides")
        except Exception as e:
            st.error(f"Erreur graphique 15min: {e}")
    else:
        st.warning(f"Donn√©es 15min non disponibles: {data_summary.get('message', 'Erreur inconnue')}")

    # Layout en 2 colonnes centr√©es : Analyse sentiment, Service LLM
    col1, col2 = st.columns(2, gap="large")

    with col1:
        # Analyse de Sentiment
        st.subheader("üí≠ Analyse de Sentiment")

        # Analyse de sentiment simple
        try:
            articles = services["sentiment_service"].get_news_articles(ticker, 10)

            if articles:
                # Trier les articles par date (plus r√©cent en premier)
                articles = sorted(articles, key=lambda x: x["timestamp"], reverse=True)

                # Afficher le dernier article analys√©
                dernier_article = articles[0]
                sentiment = services["sentiment_service"].analyze_article_sentiment(dernier_article)

                # Justification du sentiment
                justification_elements = []
                if sentiment["sentiment_score"] > 0.1:
                    justification_elements.append("üìà Tendance positive")
                elif sentiment["sentiment_score"] < -0.1:
                    justification_elements.append("üìâ Tendance n√©gative")
                else:
                    justification_elements.append("üìä Tendance neutre")

                if len(articles) > 5:
                    justification_elements.append("üì∞ Volume d'articles √©lev√©")
                elif len(articles) > 2:
                    justification_elements.append("üì∞ Volume d'articles mod√©r√©")
                else:
                    justification_elements.append("üì∞ Volume d'articles faible")

                # Affichage simple
                st.markdown(
                    f"**Dernier sentiment :** {sentiment['label']} ({sentiment['sentiment_score']:.2f}) ‚Ä¢ {dernier_article['timestamp'].strftime('%H:%M')}"
                )
                st.markdown(f"**Justification :** {' | '.join(justification_elements)}")

                # Liste des articles
                st.markdown("**üì∞ Liste des articles :**")
                for i, article in enumerate(articles[:5], 1):  # Limiter √† 5 articles
                    try:
                        article_sentiment = services["sentiment_service"].analyze_article_sentiment(article)
                        with st.expander(f"Article {i}: {article['title'][:50]}...", expanded=False):
                            st.write(f"**Source:** {article['source']} ‚Ä¢ {article['timestamp'].strftime('%H:%M')}")
                            st.write(
                                f"**Sentiment:** {article_sentiment['emoji']} {article_sentiment['label']} ({article_sentiment['sentiment_score']:.2f})"
                            )
                    except Exception as e:
                        with st.expander(f"Article {i}: {article['title'][:50]}...", expanded=False):
                            st.error(f"‚ùå Erreur d'analyse: {str(e)}")
            else:
                st.info("Aucun article disponible")

        except Exception as e:
            st.error(f"Erreur Analyse Sentiment: {str(e)}")

    with col2:
        # Service LLM
        st.subheader("üß† Service LLM")

        # Service LLM simple
        try:
            llm_service = LLMService()
            llm_status = llm_service.check_service_status()

            # Affichage du statut
            if llm_status["online"] and llm_status["model_available"]:
                st.success(f"‚úÖ {llm_status['status']}")

                # G√©n√©ration automatique de synth√®se si fusion disponible
                if fusion_available and market_status["is_open"] and ticker == "SPY" and fusion_data:
                    try:
                        current_price = services["data_service"].load_data(ticker)["CLOSE"].iloc[-1]
                        sentiment_score = services["sentiment_service"].get_sentiment_score(ticker)

                        synthesis = llm_service.generate_trading_synthesis(
                            ticker,
                            fusion_data["recommendation"],
                            fusion_data.get("fusion_score", 0.0),
                            current_price,
                            sentiment_score,
                        )

                        if synthesis["success"]:
                            st.session_state["llm_synthesis"] = synthesis
                            llm_service.save_synthesis(ticker, synthesis)

                            with st.expander("üìù Analyse LLM Automatique", expanded=True):
                                st.write(synthesis["synthesis"])
                                st.caption(f"Mod√®le: {synthesis['model']} ‚Ä¢ {synthesis['timestamp'][:19]}")
                        else:
                            st.warning(f"‚ö†Ô∏è {synthesis['synthesis']}")

                    except Exception as e:
                        if "timeout" in str(e).lower():
                            st.warning("‚ö†Ô∏è Service LLM occup√© - R√©essayez plus tard")
                        else:
                            st.warning(f"‚ö†Ô∏è Erreur g√©n√©ration: {str(e)[:50]}...")
                else:
                    st.info("‚ÑπÔ∏è Synth√®se LLM disponible uniquement pour SPY en march√© ouvert")

                # Afficher l'historique des synth√®ses
                try:
                    from src.constants import CONSTANTS

                    synthesis_path = CONSTANTS.get_data_path() / "trading" / "llm_synthesis"
                    synthesis_files = list(synthesis_path.glob(f"{ticker}_synthesis_*.json"))

                    if synthesis_files:
                        # Prendre le fichier le plus r√©cent
                        latest_file = max(synthesis_files, key=lambda x: x.stat().st_mtime)

                        with open(latest_file, "r") as f:
                            syntheses = json.load(f)

                        if syntheses:
                            st.markdown("**üìö Historique des Synth√®ses:**")
                            for i, synthesis in enumerate(syntheses[-3:], 1):
                                with st.expander(f"Synth√®se #{len(syntheses) - 3 + i}", expanded=False):
                                    st.write(synthesis["synthesis"])
                                    st.caption(f"{synthesis['timestamp'][:19]} ‚Ä¢ {synthesis['tokens_used']} mots")
                        else:
                            st.info("Aucune synth√®se disponible dans l'historique")
                    else:
                        st.info("Aucun historique de synth√®ses trouv√©")

                except Exception as e:
                    st.warning(f"‚ö†Ô∏è Erreur chargement historique: {str(e)}")

            else:
                st.error(f"‚ùå {llm_status['status']}")
                st.info("üí° Pour activer le service LLM: `ollama pull phi3:mini`")

            # Section supprim√©e selon demande utilisateur

        except Exception as e:
            st.error(f"‚ùå Erreur Service LLM: {str(e)}")

    # 5. TABLEAU DES D√âCISIONS R√âCENTES
    show_decisions_table(ticker)

    # 6. √âTATS DES SERVICES - D√©plac√© en fin de page et corrig√©
    st.header("üîß √âtats des Services")

    try:
        # R√©cup√©rer les statuts des services
        articles = services["sentiment_service"].get_news_articles(ticker, 10)
        article_count = len(articles) if articles else 0
        data = services["data_service"].load_data(ticker)

        # Utiliser l'heure fixe de la derni√®re d√©cision au lieu de l'heure actuelle
        try:
            # Charger les d√©cisions r√©centes pour avoir l'heure fixe
            decisions_path = Path("data/trading/decisions_log/trading_decisions.json")
            if decisions_path.exists():
                with open(decisions_path, "r") as f:
                    decisions = json.load(f)
                if decisions:
                    # Utiliser l'heure de la derni√®re d√©cision
                    last_decision = decisions[-1]
                    timestamp_str = last_decision.get("timestamp", "")
                    if timestamp_str:
                        import pytz

                        # Parser le timestamp
                        dt = datetime.fromisoformat(timestamp_str.replace("Z", "+00:00"))
                        # Convertir en heure de Paris
                        paris_tz = pytz.timezone("Europe/Paris")
                        paris_time = dt.astimezone(paris_tz)
                        last_update = paris_time.strftime("%H:%M")
                    else:
                        last_update = "N/A"
                else:
                    last_update = "N/A"
            else:
                last_update = "N/A"
        except Exception as e:
            last_update = "N/A"

        # Construire la ligne de statut
        if market_status["is_open"]:
            market_status_text = "üü¢ March√© Ouvert (EST)"
            market_time = f"Heure: {market_status['current_time']}"
            next_info = f"Fermeture: {market_status['next_close']}"
            warning = ""
        else:
            market_status_text = "üî¥ March√© Ferm√© (EST)"
            market_time = f"Heure: {market_status['current_time']}"
            next_info = f"Ouverture: {market_status['next_open']}"
            warning = "‚ö†Ô∏è Aucune pr√©diction disponible en dehors des heures de march√©"

        # Services status - Logique corrig√©e selon √©tat du march√©
        crawler_status = "üü¢" if article_count > 0 else "üî¥"

        # Prix : donn√©es historiques toujours disponibles, mais pas de prix en temps r√©el si march√© ferm√©
        if not data.empty:
            if market_status["is_open"]:
                price_status = "üü¢"  # Donn√©es historiques + march√© ouvert
            else:
                price_status = "üü°"  # Donn√©es historiques seulement (pas de temps r√©el)
        else:
            price_status = "üî¥"  # Pas de donn√©es du tout

        # Fusion : seulement si donn√©es prix disponibles ET march√© ouvert
        if market_status["is_open"] and not data.empty:
            fusion_status = "üü¢"
        else:
            fusion_status = "üî¥"

        status_line = f"{market_status_text} | {market_time} | {next_info}"
        if warning:
            status_line += f" | {warning}"
        status_line += f" | Articles: {crawler_status} {article_count} | Prix: {price_status} {last_update} | Fusion: {fusion_status}"

        st.markdown(
            f"""
        <div class="status-line">
            {status_line}
        </div>
        """,
            unsafe_allow_html=True,
        )

    except Exception as e:
        st.error(f"Erreur statut services: {e}")


def _check_fusion_dependencies(services, ticker, market_status):
    """V√©rifie les d√©pendances critiques pour le calcul de fusion"""
    errors = []
    fusion_available = True

    try:
        # 1. V√©rifier la disponibilit√© des donn√©es de prix
        try:
            data = services["data_service"].load_data(ticker)
            if data.empty:
                errors.append(
                    {
                        "severity": "critical",
                        "title": "Donn√©es Prix Manquantes",
                        "message": "Aucune donn√©e de prix disponible pour le calcul de fusion.",
                    }
                )
                fusion_available = False
        except Exception as e:
            errors.append(
                {
                    "severity": "critical",
                    "title": "Erreur Chargement Prix",
                    "message": f"Impossible de charger les donn√©es de prix: {str(e)}",
                }
            )
            fusion_available = False

        # 2. V√©rifier la pr√©diction (seulement pour SPY) - Utiliser le cache
        if ticker == "SPY":
            try:
                cache_key = f"{ticker}_prediction"
                if cache_key in st.session_state.prediction_cache:
                    prediction = st.session_state.prediction_cache[cache_key]
                else:
                    prediction = services["prediction_service"].predict_with_features(ticker, horizon=20)
                    st.session_state.prediction_cache[cache_key] = prediction

                if not prediction or ("predictions" not in prediction and "trend_signal" not in prediction):
                    errors.append(
                        {
                            "severity": "warning",
                            "title": "Pr√©diction Indisponible",
                            "message": "Les pr√©dictions LSTM ne sont pas disponibles. Utilisation de valeurs par d√©faut.",
                        }
                    )
            except Exception as e:
                errors.append(
                    {
                        "severity": "warning",
                        "title": "Erreur Pr√©diction",
                        "message": f"Erreur lors du calcul de pr√©diction: {str(e)}",
                    }
                )

        # 3. V√©rifier le sentiment
        try:
            articles = services["sentiment_service"].get_news_articles(ticker, 5)
            if not articles:
                errors.append(
                    {
                        "severity": "warning",
                        "title": "Articles Manquants",
                        "message": "Aucun article disponible pour l'analyse de sentiment.",
                    }
                )
        except Exception as e:
            errors.append(
                {
                    "severity": "warning",
                    "title": "Erreur Sentiment",
                    "message": f"Erreur lors de la r√©cup√©ration des articles: {str(e)}",
                }
            )

        # 4. V√©rifier l'√©tat du march√©
        if not market_status["is_open"] and ticker == "SPY":
            errors.append(
                {
                    "severity": "info",
                    "title": "March√© Ferm√©",
                    "message": "Le march√© est ferm√©. Les pr√©dictions peuvent √™tre moins fiables.",
                }
            )

    except Exception as e:
        errors.append(
            {
                "severity": "critical",
                "title": "Erreur Syst√®me",
                "message": f"Erreur lors de la v√©rification des d√©pendances: {str(e)}",
            }
        )
        fusion_available = False

    return fusion_available, errors


def _get_price_signal(services, ticker):
    """R√©cup√®re le signal de prix"""
    try:
        data = services["data_service"].load_data(ticker)
        if data.empty:
            return 0.0

        # Calculer la tendance sur les 5 derni√®res p√©riodes
        recent_data = data.tail(5)
        if len(recent_data) < 2:
            return 0.0

        # Tendance bas√©e sur la variation moyenne
        price_change = (recent_data["Close"].iloc[-1] - recent_data["Close"].iloc[0]) / recent_data["Close"].iloc[0]

        # Normaliser entre 0 et 1 (0.5 = neutre)
        signal = 0.5 + (price_change * 2)  # Multiplier par 2 pour amplifier
        return max(0.0, min(1.0, signal))  # Clamper entre 0 et 1

    except Exception:
        return 0.0


def _get_sentiment_signal(services, ticker):
    """R√©cup√®re le signal de sentiment"""
    try:
        sentiment_summary = services["sentiment_service"].get_sentiment_summary(ticker)
        if "avg_sentiment" in sentiment_summary:
            # Normaliser de [-1, 1] vers [0, 1]
            return (sentiment_summary["avg_sentiment"] + 1) / 2
        return 0.5  # Neutre par d√©faut
    except Exception:
        return 0.5


def _get_prediction_signal(services, ticker):
    """R√©cup√®re le signal de pr√©diction (utilise le cache)"""
    try:
        if ticker != "SPY":
            return 0.5  # Neutre pour NVDA

        # Utiliser le cache de pr√©diction au lieu de recalculer
        cache_key = f"{ticker}_prediction"
        if cache_key in st.session_state.prediction_cache:
            prediction = st.session_state.prediction_cache[cache_key]
        else:
            prediction = services["prediction_service"].predict_with_features(ticker, horizon=20)
            st.session_state.prediction_cache[cache_key] = prediction

        if prediction and "trend_signal" in prediction:
            # Utiliser le trend_signal normalis√© (-1 √† +1) et le convertir en 0-1
            trend_signal = prediction["trend_signal"]
            return (trend_signal + 1) / 2  # Convertir -1,+1 vers 0,1
        elif prediction and "predictions" in prediction and prediction["predictions"]:
            # Fallback: utiliser la premi√®re pr√©diction
            pred_value = prediction["predictions"][0] if prediction["predictions"] else 0.5
            return max(0.0, min(1.0, pred_value))

        return 0.5  # Neutre par d√©faut
    except Exception:
        return 0.5


def show_decisions_table(ticker):
    """Affiche le tableau des d√©cisions r√©centes"""
    st.header("üìã D√©cisions R√©centes - Synth√®se")

    try:
        # Service de validation unifi√©
        decision_validation = DecisionValidationService()
        
        # R√©cup√©rer l'historique des validations (d√©cisions d√©j√† valid√©es)
        validation_history_df = decision_validation.get_validation_history(ticker, days=7)
        validation_results = validation_history_df.to_dict('records') if not validation_history_df.empty else []

        # R√©cup√©rer les d√©cisions en attente de validation
        pending_decisions = decision_validation.get_pending_decisions(ticker)

        # Combiner les d√©cisions valid√©es et en attente (SANS DOUBLONS)
        all_decisions = []
        seen_timestamps = set()

        def normalize_timestamp(ts):
            """Normalise le timestamp pour la comparaison (enl√®ve microsecondes et timezone)"""
            if isinstance(ts, str):
                # Parse et normalise
                try:
                    if "T" in ts:
                        dt = datetime.fromisoformat(ts.replace("Z", "+00:00"))
                    else:
                        dt = datetime.strptime(ts, "%Y-%m-%d %H:%M:%S")
                    # Retourner format normalis√© sans microsecondes
                    return dt.strftime("%Y-%m-%d %H:%M:%S")
                except:
                    return str(ts)[:19]  # Garder YYYY-MM-DD HH:MM:SS
            elif hasattr(ts, "strftime"):
                return ts.strftime("%Y-%m-%d %H:%M:%S")
            return str(ts)[:19]

        # IMPORTANT: Ajouter PENDING d'abord pour afficher "‚è≥ Attente..." au lieu des prix valid√©s
        # Ajouter les d√©cisions en attente EN PREMIER
        for decision in pending_decisions:
            decision["status"] = "pending"
            timestamp_normalized = normalize_timestamp(decision.get("timestamp", ""))
            if timestamp_normalized not in seen_timestamps:
                all_decisions.append(decision)
                seen_timestamps.add(timestamp_normalized)

        # Ajouter les d√©cisions valid√©es (ignor√©es si d√©j√† en attente)
        for decision in validation_results:
            decision["status"] = "validated"
            timestamp_normalized = normalize_timestamp(decision.get("timestamp", ""))
            if timestamp_normalized not in seen_timestamps:
                all_decisions.append(decision)
                seen_timestamps.add(timestamp_normalized)

        if all_decisions:
            # Trier par timestamp pour avoir les plus r√©centes en premier
            def get_timestamp_key(decision):
                timestamp = decision.get("timestamp", "")
                if isinstance(timestamp, str):
                    try:
                        dt = datetime.fromisoformat(timestamp.replace("Z", "+00:00"))
                        if dt.tzinfo is None:
                            dt = dt.replace(tzinfo=timezone.utc)
                        return dt
                    except:
                        return datetime.min.replace(tzinfo=timezone.utc)
                elif hasattr(timestamp, "timestamp"):
                    if timestamp.tzinfo is None:
                        timestamp = timestamp.replace(tzinfo=timezone.utc)
                    return timestamp
                else:
                    return datetime.min.replace(tzinfo=timezone.utc)

            recent_decisions = sorted(all_decisions, key=get_timestamp_key, reverse=True)

            # Limiter √† 10 lignes pour l'affichage
            display_decisions = recent_decisions[:10]

            # Cr√©er le tableau avec les colonnes sp√©cifi√©es
            table_data = []
            for i, decision in enumerate(display_decisions):
                # G√©rer l'affichage de l'heure correctement (Heure de Paris)
                timestamp = decision.get("timestamp", "N/A")
                if hasattr(timestamp, "strftime"):
                    # Objet datetime - convertir en heure de Paris
                    import pytz

                    try:
                        # Si c'est d√©j√† en UTC, convertir en Paris
                        if timestamp.tzinfo is None:
                            timestamp = timestamp.replace(tzinfo=pytz.UTC)
                        paris_tz = pytz.timezone("Europe/Paris")
                        paris_time = timestamp.astimezone(paris_tz)
                        heure_str = paris_time.strftime("%H:%M")
                        date_str = paris_time.strftime("%d/%m")
                    except:
                        heure_str = timestamp.strftime("%H:%M")
                        date_str = timestamp.strftime("%d/%m")
                elif isinstance(timestamp, str):
                    # Cha√Æne de caract√®res - essayer de parser
                    try:
                        if "T" in timestamp:
                            dt = datetime.fromisoformat(timestamp.replace("Z", "+00:00"))
                        else:
                            dt = datetime.strptime(timestamp, "%Y-%m-%d %H:%M:%S")

                        # Convertir en heure de Paris
                        import pytz

                        if dt.tzinfo is None:
                            dt = dt.replace(tzinfo=pytz.UTC)
                        paris_tz = pytz.timezone("Europe/Paris")
                        paris_time = dt.astimezone(paris_tz)
                        heure_str = paris_time.strftime("%H:%M")
                        date_str = paris_time.strftime("%d/%m")
                    except Exception as e:
                        if " " in timestamp and ":" in timestamp:
                            time_part = timestamp.split(" ")[1]
                            heure_str = time_part[:5]
                            date_str = timestamp.split(" ")[0][5:]
                        else:
                            heure_str = str(timestamp)[:5]
                            date_str = "N/A"
                else:
                    heure_str = str(timestamp)[:5]
                    date_str = "N/A"

                # Calculer les prix et le gain INSTANTAN√âMENT
                current_price = decision.get("current_price", 0)
                decision_status = decision.get("status", "validated")

                # R√©cup√©rer le timestamp de la d√©cision
                timestamp = decision.get("timestamp", "")
                try:
                    if isinstance(timestamp, str):
                        if "T" in timestamp:
                            decision_time = datetime.fromisoformat(timestamp.replace("Z", "+00:00"))
                        else:
                            decision_time = datetime.strptime(timestamp, "%Y-%m-%d %H:%M:%S")
                            decision_time = decision_time.replace(tzinfo=timezone.utc)
                    elif hasattr(timestamp, "timestamp"):
                        decision_time = timestamp
                        if decision_time.tzinfo is None:
                            decision_time = decision_time.replace(tzinfo=timezone.utc)
                    else:
                        decision_time = None
                except:
                    decision_time = None

                # Calculer le prix 15min APR√àS la d√©cision
                future_price = None
                if decision_time:
                    try:
                        # Charger les prix 15min
                        prices_path = CONSTANTS.get_data_path("prices", ticker, "15min")
                        if prices_path.exists():
                            prices_df = pd.read_parquet(prices_path)
                            prices_df['ts_utc'] = pd.to_datetime(prices_df['ts_utc'])

                            # Trouver le prix 15 minutes APR√àS la d√©cision
                            target_time = decision_time + pd.Timedelta(minutes=15)

                            # Chercher le prix le plus proche dans une fen√™tre de +/- 5 minutes
                            window_start = target_time - pd.Timedelta(minutes=5)
                            window_end = target_time + pd.Timedelta(minutes=5)

                            mask = (prices_df['ts_utc'] >= window_start) & (prices_df['ts_utc'] <= window_end)
                            matching_prices = prices_df[mask]

                            if not matching_prices.empty:
                                # Prendre le prix le plus proche de target_time
                                matching_prices = matching_prices.copy()
                                matching_prices['time_diff'] = abs((matching_prices['ts_utc'] - target_time).dt.total_seconds())
                                closest_row = matching_prices.loc[matching_prices['time_diff'].idxmin()]
                                future_price = float(closest_row['close'])
                    except Exception as e:
                        logger.error(f"Erreur r√©cup√©ration prix 15min: {e}")

                # Afficher les r√©sultats
                if future_price is not None:
                    # Calculer le gain en dollars
                    gain_dollars = future_price - current_price

                    # D√©terminer le r√©sultat bas√© sur la comparaison des prix
                    # Si prix -15min < prix +15min ‚Üí Positif (hausse)
                    # Si prix -15min > prix +15min ‚Üí N√©gatif (baisse)
                    is_positive = current_price < future_price
                    result_text = "Positif ‚úÖ" if is_positive else "N√©gatif ‚ùå"

                    future_price_display = f"${future_price:.2f}"
                    gain_display = f"${gain_dollars:+.2f}"
                else:
                    # Prix 15min pas encore disponible
                    future_price_display = "‚è≥ Attente..."
                    gain_display = "‚è≥"
                    result_text = "‚è≥ En attente..."

                table_data.append(
                    {
                        "N¬∞": i + 1,
                        "Date": date_str,
                        "Heure": heure_str,
                        "Prix -15min": f"${current_price:.2f}",
                        "Prix +15min": future_price_display,
                        "D√©cision": decision.get("decision", "N/A"),
                        "R√©sultat": result_text,
                        "Gain": gain_display,
                    }
                )

            if table_data:
                df_table = pd.DataFrame(table_data)

                # Afficher le tableau en pleine largeur
                st.dataframe(
                    df_table,
                    width="stretch",
                    height=300,
                    column_config={
                        "N¬∞": st.column_config.NumberColumn("N¬∞", width="small"),
                        "Date": st.column_config.TextColumn("Date", width="small"),
                        "Heure": st.column_config.TextColumn("Heure", width="small"),
                        "Prix -15min": st.column_config.TextColumn("Prix -15min", width="medium"),
                        "Prix +15min": st.column_config.TextColumn("Prix +15min", width="medium"),
                        "D√©cision": st.column_config.TextColumn("D√©cision", width="small"),
                        "R√©sultat": st.column_config.TextColumn("R√©sultat", width="medium"),
                        "Gain": st.column_config.TextColumn("Gain", width="medium"),
                    },
                )

                # Statistiques simplifi√©es
                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    st.metric("Total D√©cisions", len(table_data))
                with col2:
                    positive_count = sum(1 for d in table_data if d["R√©sultat"] == "Positif")
                    st.metric("R√©sultats Positifs", f"{positive_count}/{len(table_data)}")
                with col3:
                    # Calculer le gain total (ignorer les d√©cisions en attente avec "‚è≥")
                    validated_gains = [d for d in table_data if d["Gain"] != "‚è≥"]
                    if validated_gains:
                        total_gain = sum(float(d["Gain"].replace("$", "").replace("+", "")) for d in validated_gains)
                        st.metric("Gain Total", f"${total_gain:+.2f}")
                    else:
                        st.metric("Gain Total", "En attente...")
                with col4:
                    # Bouton de t√©l√©chargement pour toutes les donn√©es
                    if len(validation_results) > 10:
                        # Cr√©er un DataFrame complet pour le t√©l√©chargement
                        full_table_data = []
                        for i, decision in enumerate(validation_results):
                            # M√™me logique que pour l'affichage mais pour toutes les donn√©es
                            timestamp = decision.get("timestamp", "N/A")
                            if hasattr(timestamp, "strftime"):
                                import pytz

                                try:
                                    if timestamp.tzinfo is None:
                                        timestamp = timestamp.replace(tzinfo=pytz.UTC)
                                    paris_tz = pytz.timezone("Europe/Paris")
                                    paris_time = timestamp.astimezone(paris_tz)
                                    heure_str = paris_time.strftime("%H:%M")
                                    date_str = paris_time.strftime("%d/%m")
                                except:
                                    heure_str = timestamp.strftime("%H:%M")
                                    date_str = timestamp.strftime("%d/%m")
                            elif isinstance(timestamp, str):
                                try:
                                    if "T" in timestamp:
                                        dt = datetime.fromisoformat(timestamp.replace("Z", "+00:00"))
                                    else:
                                        dt = datetime.strptime(timestamp, "%Y-%m-%d %H:%M:%S")
                                    import pytz

                                    if dt.tzinfo is None:
                                        dt = dt.replace(tzinfo=pytz.UTC)
                                    paris_tz = pytz.timezone("Europe/Paris")
                                    paris_time = dt.astimezone(paris_tz)
                                    heure_str = paris_time.strftime("%H:%M")
                                    date_str = paris_time.strftime("%d/%m")
                                except:
                                    if " " in timestamp and ":" in timestamp:
                                        time_part = timestamp.split(" ")[1]
                                        heure_str = time_part[:5]
                                        date_str = timestamp.split(" ")[0][5:]
                                    else:
                                        heure_str = str(timestamp)[:5]
                                        date_str = "N/A"
                            else:
                                heure_str = str(timestamp)[:5]
                                date_str = "N/A"

                            current_price = decision.get("current_price", 0)
                            future_price = decision.get("future_price", 0)
                            price_change = decision.get("price_change", 0)
                            gain_dollars = future_price - current_price

                            # D√©terminer le r√©sultat bas√© sur la comparaison des prix
                            # Si prix -15min < prix +15min ‚Üí Positif (hausse)
                            # Si prix -15min > prix +15min ‚Üí N√©gatif (baisse)
                            is_positive = current_price < future_price
                            result_text = "Positif" if is_positive else "N√©gatif"

                            full_table_data.append(
                                {
                                    "N¬∞": i + 1,
                                    "Date": date_str,
                                    "Heure": heure_str,
                                    "Prix -15min": f"${current_price:.2f}",
                                    "Prix +15min": f"${future_price:.2f}",
                                    "D√©cision": decision.get("decision", "N/A"),
                                    "R√©sultat": result_text,
                                    "Gain": f"${gain_dollars:+.2f}",
                                }
                            )

                        # Cr√©er le CSV pour le t√©l√©chargement
                        full_df = pd.DataFrame(full_table_data)
                        csv = full_df.to_csv(index=False)

                        st.download_button(
                            label="üì• T√©l√©charger toutes les donn√©es",
                            data=csv,
                            file_name=f"decisions_historiques_{ticker}_{datetime.now().strftime('%Y%m%d')}.csv",
                            mime="text/csv",
                            help=f"T√©l√©charge toutes les {len(validation_results)} d√©cisions historiques",
                        )
                    else:
                        st.info("Toutes les donn√©es sont affich√©es")
            else:
                st.info("Aucune d√©cision r√©cente disponible")
        else:
            st.info("Aucune donn√©e de validation disponible")
    except Exception as e:
        st.warning(f"‚ö†Ô∏è Erreur chargement tableau: {str(e)}")


def _check_market_status():
    """V√©rifie l'√©tat du march√© (ouvert/ferm√©) - Horaires US (EDT/EST)"""
    import pytz

    # Utiliser pytz pour g√©rer correctement l'heure d'√©t√© am√©ricaine
    try:
        # Timezone US Eastern (g√®re automatiquement EST/EDT)
        us_eastern = pytz.timezone("US/Eastern")
        now_est = datetime.now(us_eastern)
        current_time = now_est.strftime("%H:%M")

        # Heures de march√© US (9h30 - 16h00, du lundi au vendredi)
        market_open = now_est.replace(hour=9, minute=30, second=0, microsecond=0)
        market_close = now_est.replace(hour=16, minute=0, second=0, microsecond=0)

        # V√©rifier si c'est un jour de semaine
        is_weekday = now_est.weekday() < 5  # 0-4 = lundi-vendredi

        if is_weekday and market_open <= now_est <= market_close:
            return {
                "is_open": True,
                "current_time": current_time,
                "timezone": "EDT" if now_est.dst() else "EST",
                "next_close": market_close.strftime("%H:%M"),
                "next_open": "09:30" if now_est.date() == market_open.date() else "Lundi 09:30",
            }
        else:
            # Calculer la prochaine ouverture
            if now_est.weekday() >= 5:  # Weekend
                days_until_monday = 7 - now_est.weekday()
                next_open = now_est + timedelta(days=days_until_monday)
            elif now_est < market_open:  # Avant l'ouverture
                next_open = now_est
            else:  # Apr√®s la fermeture
                next_open = now_est + timedelta(days=1)

            next_open = next_open.replace(hour=9, minute=30, second=0, microsecond=0)

            return {
                "is_open": False,
                "current_time": current_time,
                "timezone": "EDT" if now_est.dst() else "EST",
                "next_open": next_open.strftime("%A %H:%M"),
                "next_close": "16:00",
            }
    except ImportError:
        # Fallback si pytz n'est pas disponible
        # Utiliser EDT (UTC-4) pour septembre 2025
        edt = timezone(timedelta(hours=-4))
        now_est = datetime.now(edt)
        current_time = now_est.strftime("%H:%M")

        # Heures de march√© US (9h30 - 16h00 EDT, du lundi au vendredi)
        market_open = now_est.replace(hour=9, minute=30, second=0, microsecond=0)
        market_close = now_est.replace(hour=16, minute=0, second=0, microsecond=0)

        # V√©rifier si c'est un jour de semaine
        is_weekday = now_est.weekday() < 5  # 0-4 = lundi-vendredi

        if is_weekday and market_open <= now_est <= market_close:
            return {
                "is_open": True,
                "current_time": current_time,
                "timezone": "EDT",
                "next_close": market_close.strftime("%H:%M"),
                "next_open": "09:30" if now_est.date() == market_open.date() else "Lundi 09:30",
            }
        else:
            # Calculer la prochaine ouverture
            if now_est.weekday() >= 5:  # Weekend
                days_until_monday = 7 - now_est.weekday()
                next_open = now_est + timedelta(days=days_until_monday)
            elif now_est < market_open:  # Avant l'ouverture
                next_open = now_est
            else:  # Apr√®s la fermeture
                next_open = now_est + timedelta(days=1)

            next_open = next_open.replace(hour=9, minute=30, second=0, microsecond=0)

            return {
                "is_open": False,
                "current_time": current_time,
                "timezone": "EDT",
                "next_open": next_open.strftime("%A %H:%M"),
                "next_close": "16:00",
            }


def _get_next_decision_time():
    """
    Calcule la prochaine heure de d√©cision bas√©e sur des fen√™tres fixes de 15 minutes
    Heures de march√© US : 9:30-16:00 (EDT/EST)
    Fen√™tres : 9:30, 9:45, 10:00, 10:15... 15:45, 16:00
    """
    try:
        import pytz

        # Timezone US Eastern (g√®re automatiquement EST/EDT)
        us_eastern = pytz.timezone("US/Eastern")
        now_est = datetime.now(us_eastern)

        # Heures de march√© US (9:30-16:00)
        market_open = now_est.replace(hour=9, minute=30, second=0, microsecond=0)
        market_close = now_est.replace(hour=16, minute=0, second=0, microsecond=0)

        # Si on est avant l'ouverture, prochaine d√©cision √† 9:30
        if now_est < market_open:
            next_decision = market_open
        # Si on est apr√®s la fermeture, prochaine d√©cision demain √† 9:30
        elif now_est >= market_close:
            next_decision = market_open + timedelta(days=1)
        else:
            # On est pendant les heures de march√©, calculer la prochaine fen√™tre de 15 minutes
            current_minute = now_est.minute
            current_hour = now_est.hour

            # Calculer la prochaine fen√™tre de 15 minutes
            if current_minute < 30:
                next_minute = 30
            elif current_minute < 45:
                next_minute = 45
            else:
                next_minute = 0
                current_hour += 1

            # Si on d√©passe 16:00, prochaine d√©cision demain √† 9:30
            if current_hour >= 16:
                next_decision = market_open + timedelta(days=1)
            else:
                next_decision = now_est.replace(hour=current_hour, minute=next_minute, second=0, microsecond=0)

        # Convertir en heure de Paris pour l'affichage
        paris_tz = pytz.timezone("Europe/Paris")
        paris_time = next_decision.astimezone(paris_tz)
        return paris_time.strftime("%H:%M")

    except ImportError:
        # Fallback si pytz n'est pas disponible
        # Utiliser EDT (UTC-4) pour septembre 2025
        edt = timezone(timedelta(hours=-4))
        now_est = datetime.now(edt)

        # Heures de march√© US (9:30-16:00 EDT)
        market_open = now_est.replace(hour=9, minute=30, second=0, microsecond=0)
        market_close = now_est.replace(hour=16, minute=0, second=0, microsecond=0)

        # Si on est avant l'ouverture, prochaine d√©cision √† 9:30
        if now_est < market_open:
            next_decision = market_open
        # Si on est apr√®s la fermeture, prochaine d√©cision demain √† 9:30
        elif now_est >= market_close:
            next_decision = market_open + timedelta(days=1)
        else:
            # On est pendant les heures de march√©, calculer la prochaine fen√™tre de 15 minutes
            current_minute = now_est.minute
            current_hour = now_est.hour

            # Calculer la prochaine fen√™tre de 15 minutes
            if current_minute < 30:
                next_minute = 30
            elif current_minute < 45:
                next_minute = 45
            else:
                next_minute = 0
                current_hour += 1

            # Si on d√©passe 16:00, prochaine d√©cision demain √† 9:30
            if current_hour >= 16:
                next_decision = market_open + timedelta(days=1)
            else:
                next_decision = now_est.replace(hour=current_hour, minute=next_minute, second=0, microsecond=0)

        # Convertir en heure de Paris pour l'affichage (fallback)
        # Calculer le d√©calage horaire (EDT = UTC-4, Paris = UTC+2 en √©t√©)
        paris_offset = 6  # 6 heures de d√©calage entre EDT et Paris en √©t√©
        paris_hour = (next_decision.hour + paris_offset) % 24
        paris_time = next_decision.replace(hour=paris_hour)
        return paris_time.strftime("%H:%M")
