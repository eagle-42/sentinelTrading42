"""
Flows Sentinel42 pour d√©ploiement Prefect 3.0
Appelle les scripts r√©els de collecte de donn√©es et trading
"""

import subprocess
import sys
from pathlib import Path
from prefect import flow, get_run_logger

# Chemin vers les scripts
SCRIPTS_DIR = Path(__file__).parent.parent / "scripts"

@flow(name="prix_15min")
def flow_prix_15min():
    """Flow de r√©cup√©ration des prix 15min via Finnhub"""
    logger = get_run_logger()
    logger.info("üìä R√©cup√©ration des prix SPY (15min)")

    try:
        script_path = SCRIPTS_DIR / "finnhub_scraper.py"
        result = subprocess.run(
            [sys.executable, str(script_path)],
            capture_output=True,
            text=True,
            timeout=30
        )

        if result.returncode == 0:
            logger.info("‚úÖ Prix 15min r√©cup√©r√©s avec succ√®s")
            return {"status": "success", "data": "prix_15min"}
        else:
            logger.error(f"‚ùå Erreur r√©cup√©ration prix: {result.stderr}")
            return {"status": "error", "error": result.stderr}

    except Exception as e:
        logger.error(f"‚ùå Exception flow prix: {e}")
        return {"status": "error", "error": str(e)}

@flow(name="news_sentiment")
def flow_news_sentiment():
    """Flow de r√©cup√©ration des news et analyse de sentiment"""
    logger = get_run_logger()
    logger.info("üì∞ R√©cup√©ration news + analyse sentiment")

    try:
        script_path = SCRIPTS_DIR / "refresh_news.py"
        if not script_path.exists():
            logger.warning("‚ö†Ô∏è Script refresh_news.py non trouv√©")
            return {"status": "skipped", "reason": "script not found"}

        result = subprocess.run(
            [sys.executable, str(script_path)],
            capture_output=True,
            text=True,
            timeout=60
        )

        if result.returncode == 0:
            logger.info("‚úÖ News et sentiment analys√©s")
            return {"status": "success", "data": "news_sentiment"}
        else:
            logger.error(f"‚ùå Erreur news/sentiment: {result.stderr}")
            return {"status": "error", "error": result.stderr}

    except Exception as e:
        logger.error(f"‚ùå Exception flow news: {e}")
        return {"status": "error", "error": str(e)}

@flow(name="trading")
def flow_trading():
    """
    Flow de trading COMPLET : Prix 15min ‚Üí News ‚Üí D√©cision
    Ex√©cution: Toutes les 15 minutes (heures march√©)
    Ordre CRITIQUE pour la strat√©gie
    """
    logger = get_run_logger()
    logger.info("üöÄ D√©marrage Trading Flow (Prix ‚Üí News ‚Üí D√©cision)")

    # 1. R√©cup√©rer les prix 15min
    logger.info("1Ô∏è‚É£ Rafra√Æchissement prix 15min...")
    prix_result = flow_prix_15min()

    # 2. R√©cup√©rer les news + sentiment
    logger.info("2Ô∏è‚É£ Rafra√Æchissement news + sentiment...")
    news_result = flow_news_sentiment()

    # 3. G√©n√©rer d√©cision de trading
    logger.info("3Ô∏è‚É£ G√©n√©ration d√©cision de trading...")
    try:
        script_path = SCRIPTS_DIR / "trading_pipeline.py"
        result = subprocess.run(
            [sys.executable, str(script_path)],
            capture_output=True,
            text=True,
            timeout=120
        )

        if result.returncode == 0:
            logger.info("‚úÖ Trading Flow termin√© avec succ√®s")
            return {
                "status": "success",
                "prix": prix_result,
                "news": news_result,
                "decision": {"status": "success", "data": "trading"}
            }
        else:
            logger.warning(f"‚ö†Ô∏è Trading termin√© avec code {result.returncode}")
            return {
                "status": "completed_with_warnings",
                "prix": prix_result,
                "news": news_result,
                "decision": {"returncode": result.returncode}
            }

    except Exception as e:
        logger.error(f"‚ùå Exception flow trading: {e}")
        return {
            "status": "error",
            "prix": prix_result,
            "news": news_result,
            "decision": {"error": str(e)}
        }

@flow(name="update_model")
def flow_update_model():
    """
    Flow de mise √† jour du mod√®le LSTM
    1. T√©l√©charge donn√©es yfinance √† jour
    2. R√©entra√Æne le mod√®le LSTM
    Ex√©cution: Au d√©marrage de l'app
    """
    logger = get_run_logger()
    logger.info("üîÑ Mise √† jour mod√®le LSTM")

    # 1. T√©l√©charger donn√©es yfinance
    logger.info("1Ô∏è‚É£ T√©l√©chargement donn√©es yfinance...")
    try:
        script_path = SCRIPTS_DIR / "update_yfinance_data.py"
        result = subprocess.run(
            [sys.executable, str(script_path)],
            capture_output=True,
            text=True,
            timeout=120
        )

        if result.returncode == 0:
            logger.info("‚úÖ Donn√©es yfinance mises √† jour")
            yfinance_result = {"status": "success"}
        else:
            logger.warning(f"‚ö†Ô∏è Donn√©es yfinance: code {result.returncode}")
            yfinance_result = {"status": "warning", "returncode": result.returncode}

    except Exception as e:
        logger.error(f"‚ùå Erreur t√©l√©chargement yfinance: {e}")
        yfinance_result = {"status": "error", "error": str(e)}

    # 2. R√©entra√Æner mod√®le LSTM
    logger.info("2Ô∏è‚É£ R√©entra√Ænement mod√®le LSTM...")
    try:
        script_path = SCRIPTS_DIR / "retrain_lstm.py"
        result = subprocess.run(
            [sys.executable, str(script_path)],
            capture_output=True,
            text=True,
            timeout=600  # 10 minutes max pour l'entra√Ænement
        )

        if result.returncode == 0:
            logger.info("‚úÖ Mod√®le LSTM r√©entra√Æn√©")
            lstm_result = {"status": "success"}
        else:
            logger.warning(f"‚ö†Ô∏è R√©entra√Ænement LSTM: code {result.returncode}")
            lstm_result = {"status": "warning", "returncode": result.returncode}

    except Exception as e:
        logger.error(f"‚ùå Erreur r√©entra√Ænement LSTM: {e}")
        lstm_result = {"status": "error", "error": str(e)}

    logger.info("‚úÖ Mise √† jour mod√®le termin√©e")
    return {
        "status": "success",
        "yfinance": yfinance_result,
        "lstm": lstm_result
    }


@flow(name="full_system")
def flow_full_system():
    """
    Flow syst√®me complet : Mise √† jour mod√®le ‚Üí Prix ‚Üí News ‚Üí Trading
    Ex√©cution: Au d√©marrage et toutes les 2 heures
    """
    logger = get_run_logger()
    logger.info("üöÄ Ex√©cution syst√®me complet")

    # 0. Mise √† jour mod√®le LSTM (yfinance + r√©entra√Ænement)
    logger.info("0Ô∏è‚É£ Mise √† jour mod√®le LSTM...")
    model_result = flow_update_model()

    # 1. R√©cup√©rer les prix
    prix_result = flow_prix_15min()

    # 2. R√©cup√©rer les news
    news_result = flow_news_sentiment()

    # 3. G√©n√©rer d√©cision de trading
    trading_result = flow_trading()

    logger.info("‚úÖ Syst√®me complet ex√©cut√©")
    return {
        "status": "success",
        "model": model_result,
        "prix": prix_result,
        "news": news_result,
        "trading": trading_result
    }
