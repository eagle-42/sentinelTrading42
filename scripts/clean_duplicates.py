#!/usr/bin/env python3
"""
Script pour nettoyer les doublons dans les fichiers de donn√©es
"""
import json
import pandas as pd
from pathlib import Path
from datetime import datetime, timedelta
from collections import defaultdict

def clean_trading_decisions():
    """Nettoie les doublons dans trading_decisions.json"""
    file_path = Path("data/trading/decisions_log/trading_decisions.json")

    if not file_path.exists():
        print("‚ùå Fichier trading_decisions.json non trouv√©")
        return

    # Charger
    with open(file_path, 'r') as f:
        decisions = json.load(f)

    print(f"üìä Total d√©cisions avant nettoyage: {len(decisions)}")

    # D√©tecter doublons (m√™me timestamp √† 30 secondes pr√®s)
    cleaned = []
    seen_timestamps = defaultdict(list)

    for dec in decisions:
        ts = datetime.fromisoformat(dec['timestamp'].replace('Z', '+00:00'))
        # Arrondir √† la minute
        ts_rounded = ts.replace(second=0, microsecond=0)

        # V√©rifier si on a d√©j√† cette d√©cision (m√™me minute)
        duplicate = False
        for seen_ts in seen_timestamps[ts_rounded]:
            # Si diff√©rence < 30 secondes, c'est un doublon
            if abs((ts - seen_ts).total_seconds()) < 30:
                duplicate = True
                break

        if not duplicate:
            cleaned.append(dec)
            seen_timestamps[ts_rounded].append(ts)
        else:
            print(f"   üóëÔ∏è Doublon supprim√©: {dec['timestamp'][:19]} | {dec['decision']}")

    print(f"‚úÖ Total d√©cisions apr√®s nettoyage: {len(cleaned)}")
    print(f"üóëÔ∏è Doublons supprim√©s: {len(decisions) - len(cleaned)}")

    # Sauvegarder
    if len(cleaned) < len(decisions):
        # Backup
        backup_path = file_path.with_suffix('.json.bak')
        with open(backup_path, 'w') as f:
            json.dump(decisions, f, indent=2)
        print(f"üíæ Backup sauvegard√©: {backup_path}")

        # Sauvegarder nettoy√©
        with open(file_path, 'w') as f:
            json.dump(cleaned, f, indent=2)
        print(f"‚úÖ Fichier nettoy√© sauvegard√©: {file_path}")
    else:
        print("‚úÖ Aucun doublon trouv√©")

def clean_validation_history():
    """Nettoie les doublons dans decision_validation_history.parquet"""
    file_path = Path("data/trading/validation_log/decision_validation_history.parquet")

    if not file_path.exists():
        print("\n‚ùå Fichier decision_validation_history.parquet non trouv√©")
        return

    # Charger
    df = pd.read_parquet(file_path)
    print(f"\nüìä Total validations avant nettoyage: {len(df)}")

    # Supprimer doublons exacts
    df_cleaned = df.drop_duplicates(subset=['timestamp', 'ticker', 'decision'], keep='first')

    print(f"‚úÖ Total validations apr√®s nettoyage: {len(df_cleaned)}")
    print(f"üóëÔ∏è Doublons supprim√©s: {len(df) - len(df_cleaned)}")

    if len(df_cleaned) < len(df):
        # Backup
        backup_path = file_path.with_suffix('.parquet.bak')
        df.to_parquet(backup_path)
        print(f"üíæ Backup sauvegard√©: {backup_path}")

        # Sauvegarder nettoy√©
        df_cleaned.to_parquet(file_path)
        print(f"‚úÖ Fichier nettoy√© sauvegard√©: {file_path}")
    else:
        print("‚úÖ Aucun doublon trouv√©")

def clean_logs():
    """Nettoie les anciens logs d'erreurs"""
    logs_to_clean = [
        "data/logs/errors.log",
        "data/logs/prefect_server.log",
        "data/logs/prefect_worker.log"
    ]

    print("\nüßπ NETTOYAGE DES LOGS")
    for log_path in logs_to_clean:
        path = Path(log_path)
        if path.exists():
            size_before = path.stat().st_size / 1024  # KB

            # Garder seulement les 1000 derni√®res lignes
            with open(path, 'r', encoding='utf-8', errors='ignore') as f:
                lines = f.readlines()

            if len(lines) > 1000:
                with open(path, 'w', encoding='utf-8') as f:
                    f.writelines(lines[-1000:])

                size_after = path.stat().st_size / 1024  # KB
                print(f"   ‚úÇÔ∏è {path.name}: {size_before:.1f} KB ‚Üí {size_after:.1f} KB ({len(lines)} ‚Üí 1000 lignes)")
            else:
                print(f"   ‚úÖ {path.name}: {len(lines)} lignes (OK)")

if __name__ == "__main__":
    print("üßπ NETTOYAGE DES DONN√âES\n")
    print("=" * 60)

    # 1. Nettoyer les d√©cisions de trading
    print("\n1Ô∏è‚É£ TRADING DECISIONS")
    clean_trading_decisions()

    # 2. Nettoyer l'historique de validation
    print("\n2Ô∏è‚É£ VALIDATION HISTORY")
    clean_validation_history()

    # 3. Nettoyer les logs
    print("\n3Ô∏è‚É£ LOGS")
    clean_logs()

    print("\n" + "=" * 60)
    print("‚úÖ NETTOYAGE TERMIN√â")
