#!/usr/bin/env python3
"""
ü§ñ Pipeline de trading complet
Ex√©cute le pipeline de trading avec fusion des signaux et prise de d√©cision
"""

import json
import os
import sys
from datetime import datetime, timedelta, timezone
from pathlib import Path
from typing import Any, Dict, List, Optional

import numpy as np
import pandas as pd
import torch
from loguru import logger

sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from src.constants import CONSTANTS
from src.core.fusion import AdaptiveFusion
from src.core.prediction import PricePredictor
from src.core.sentiment import SentimentAnalyzer
from src.data.storage import DataStorage
from src.gui.services.decision_validation_service import DecisionValidationService


class TradingPipeline:
    """Pipeline de trading complet avec fusion des signaux"""

    def __init__(self):
        self.storage = DataStorage()
        self.tickers = CONSTANTS.TICKERS
        self.fusion = AdaptiveFusion()
        self.sentiment_analyzer = SentimentAnalyzer()
        self.prediction_engine = PricePredictor()
        self.decision_validator = DecisionValidationService()

        # Configuration de trading
        self.buy_threshold = CONSTANTS.BASE_BUY_THRESHOLD
        self.sell_threshold = CONSTANTS.BASE_SELL_THRESHOLD
        self.hold_confidence = CONSTANTS.HOLD_CONFIDENCE

        # √âtat de trading
        self.trading_state = self._load_trading_state()

    def _load_trading_state(self) -> Dict[str, Any]:
        """Charge l'√©tat de trading depuis le fichier"""
        state_path = CONSTANTS.DATA_ROOT / "trading" / "decisions_log" / "trading_state.json"

        if state_path.exists():
            try:
                with open(state_path, "r") as f:
                    return json.load(f)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erreur chargement √©tat trading: {e}")

        # √âtat par d√©faut
        return {
            "last_update": None,
            "positions": {},
            "decisions": [],
            "performance": {"total_decisions": 0, "correct_decisions": 0, "accuracy": 0.0},
        }

    def _save_trading_state(self):
        """Sauvegarde l'√©tat de trading"""
        state_path = CONSTANTS.DATA_ROOT / "trading" / "decisions_log" / "trading_state.json"
        state_path.parent.mkdir(parents=True, exist_ok=True)

        try:
            with open(state_path, "w") as f:
                json.dump(self.trading_state, f, indent=2)
            logger.debug(f"üíæ √âtat de trading sauvegard√©: {state_path}")
        except Exception as e:
            logger.error(f"‚ùå Erreur sauvegarde √©tat trading: {e}")

    def get_latest_prices(self, ticker: str) -> Optional[pd.DataFrame]:
        """R√©cup√®re les derni√®res donn√©es de prix (yfinance pour LSTM)"""
        try:
            # Charger donn√©es historiques yfinance (suffisant pour LSTM)
            yfinance_path = CONSTANTS.DATA_ROOT / "historical" / "yfinance" / f"{ticker.upper()}_1999_2025.parquet"

            if yfinance_path.exists():
                data = pd.read_parquet(yfinance_path)

                # Renommer 'date' en 'ts_utc' pour uniformiser
                if 'date' in data.columns:
                    data = data.rename(columns={'date': 'ts_utc'})

                data['ts_utc'] = pd.to_datetime(data['ts_utc'])

                # Trier et prendre les 500 derni√®res lignes (largement assez pour LSTM 216)
                data = data.sort_values("ts_utc").tail(500)

                # Renommer colonnes pour compatibilit√©
                data = data.rename(columns={
                    'open': 'Open',
                    'high': 'High',
                    'low': 'Low',
                    'close': 'Close'
                })

                logger.debug(f"üìä Donn√©es yfinance {ticker}: {len(data)} lignes ({data['ts_utc'].min()} ‚Üí {data['ts_utc'].max()})")
                return data

            # Fallback: donn√©es temps r√©el 15min (si yfinance absent)
            file_path = CONSTANTS.get_data_path("prices", ticker, "15min")
            if file_path.exists():
                data = pd.read_parquet(file_path)
                if not data.empty:
                    data = data.sort_values("ts_utc").tail(500)
                    data = data.rename(columns={
                        'open': 'Open',
                        'high': 'High',
                        'low': 'Low',
                        'close': 'Close'
                    })
                    logger.debug(f"üìä Donn√©es temps r√©el {ticker}: {len(data)} lignes")
                    return data

            logger.warning(f"‚ö†Ô∏è Aucune donn√©e de prix pour {ticker}")
            return None

        except Exception as e:
            logger.error(f"‚ùå Erreur r√©cup√©ration prix {ticker}: {e}")
            import traceback
            logger.debug(traceback.format_exc())
            return None

    def get_latest_sentiment(self, ticker: str) -> float:
        """R√©cup√®re le dernier sentiment pour un ticker"""
        try:
            # Chercher le fichier de sentiment le plus r√©cent
            sentiment_dir = CONSTANTS.SENTIMENT_DIR
            sentiment_files = list(sentiment_dir.glob("sentiment_*.parquet"))

            if not sentiment_files:
                logger.warning(f"‚ö†Ô∏è Aucun fichier de sentiment pour {ticker}")
                return 0.0

            # Prendre le fichier le plus r√©cent
            latest_file = max(sentiment_files, key=lambda x: x.stat().st_mtime)
            data = pd.read_parquet(latest_file)

            # Filtrer pour le ticker et prendre la derni√®re valeur
            ticker_data = data[data["ticker"] == ticker]
            if ticker_data.empty:
                logger.warning(f"‚ö†Ô∏è Aucun sentiment pour {ticker}")
                return 0.0

            latest_sentiment = ticker_data.iloc[-1]["sentiment_score"]
            logger.debug(f"üìä Sentiment {ticker}: {latest_sentiment:.3f}")
            return float(latest_sentiment)

        except Exception as e:
            logger.error(f"‚ùå Erreur r√©cup√©ration sentiment {ticker}: {e}")
            return 0.0

    def calculate_price_signal(self, prices: pd.DataFrame) -> float:
        """Calcule le signal de prix bas√© sur les donn√©es r√©centes"""
        if prices.empty or len(prices) < 2:
            return 0.0

        try:
            # Calculer le retour sur la p√©riode
            close_col = 'Close' if 'Close' in prices.columns else 'close'
            current_price = prices[close_col].iloc[-1]
            previous_price = prices[close_col].iloc[-2]

            # Retour simple
            price_return = (current_price - previous_price) / previous_price

            # Normaliser le signal entre -1 et 1
            price_signal = np.tanh(price_return * 10)  # Amplifier les petits changements

            logger.debug(f"üìà Signal prix: {price_return:.4f} -> {price_signal:.3f}")
            return float(price_signal)

        except Exception as e:
            logger.error(f"‚ùå Erreur calcul signal prix: {e}")
            return 0.0

    def get_lstm_prediction(self, ticker: str, prices: pd.DataFrame) -> Optional[float]:
        """R√©cup√®re la pr√©diction LSTM pour un ticker (mod√®le 4 RETURNS)"""
        try:
            # Pr√©parer les donn√©es comme le mod√®le attend : 4 RETURNS
            # Open_RETURN, High_RETURN, Low_RETURN, TARGET (Close_RETURN)
            
            # V√©rifier colonnes n√©cessaires
            required_cols = ['Open', 'High', 'Low', 'Close']
            prices_cols = [col for col in required_cols if col in prices.columns or col.lower() in prices.columns or col.upper() in prices.columns]
            
            if len(prices_cols) < 4:
                logger.warning(f"‚ö†Ô∏è Colonnes OHLC manquantes pour {ticker}")
                return None
            
            # Normaliser noms colonnes
            df = prices.copy()
            df.columns = df.columns.str.title()  # Open, High, Low, Close
            
            logger.debug(f"üìä Avant pct_change: {len(df)} lignes, colonnes: {df.columns.tolist()}")
            logger.debug(f"üìä Colonnes OHLC pr√©sentes: Open={('Open' in df.columns)}, High={('High' in df.columns)}, Low={('Low' in df.columns)}, Close={('Close' in df.columns)}")
            
            # Calculer les RETURNS
            df['Open_RETURN'] = df['Open'].pct_change()
            df['High_RETURN'] = df['High'].pct_change()
            df['Low_RETURN'] = df['Low'].pct_change()
            df['TARGET'] = df['Close'].pct_change()
            
            # Supprimer NaN SEULEMENT sur les colonnes RETURNS (pas tout le DataFrame)
            df = df.dropna(subset=['Open_RETURN', 'High_RETURN', 'Low_RETURN', 'TARGET'])
            
            logger.debug(f"üìä Apr√®s dropna: {len(df)} lignes")
            
            if len(df) < 220:  # Besoin de 216 + marge
                logger.warning(f"‚ö†Ô∏è Pas assez de donn√©es pour {ticker}: {len(df)} < 220")
                return None
            
            # S√©lectionner seulement les colonnes RETURNS
            features_df = df[['Open_RETURN', 'High_RETURN', 'Low_RETURN', 'TARGET']].copy()
            
            # Normaliser noms colonnes en MAJUSCULES
            features_df.columns = features_df.columns.str.upper()
            
            # Initialiser le pr√©dicteur
            predictor = PricePredictor(ticker)

            # Charger le mod√®le
            if not predictor.load_model():
                logger.warning(f"‚ö†Ô∏è Impossible de charger le mod√®le pour {ticker}")
                return None

            # Utiliser la m√©thode predict_with_technical_features (qui attend RETURNS)
            # Cr√©er s√©quences manuellement
            from sklearn.preprocessing import MinMaxScaler
            scaler = predictor.scaler
            
            features_scaled = scaler.transform(features_df.values)
            X, y = predictor.create_sequences(features_scaled)
            
            if X is None or len(X) == 0:
                logger.warning(f"‚ö†Ô∏è Impossible de cr√©er s√©quences pour {ticker}")
                return None
            
            # Pr√©diction
            import torch
            with torch.no_grad():
                sequence = torch.FloatTensor(X[-1:]).to(predictor.device)
                pred_scaled = predictor.model(sequence).cpu().numpy()[0, 0]
            
            # D√©normaliser
            dummy = [[pred_scaled, 0, 0, 0]]
            pred_return = scaler.inverse_transform(dummy)[0, 0]
            
            # Le signal = return pr√©dit (d√©j√† en %)
            signal = pred_return
            
            current_price = df['Close'].iloc[-1]
            predicted_price = current_price * (1 + pred_return)
            
            logger.debug(f"üîÆ Pr√©diction LSTM {ticker}: ${current_price:.2f} -> ${predicted_price:.2f} (return: {pred_return:.3%})")
            return signal

        except Exception as e:
            logger.error(f"‚ùå Erreur pr√©diction LSTM {ticker}: {e}")
            import traceback
            logger.debug(traceback.format_exc())
            return None

    def make_trading_decision(
        self, ticker: str, price_signal: float, sentiment_signal: float, prediction_signal: Optional[float] = None, prices: Optional[pd.DataFrame] = None
    ) -> Dict[str, Any]:
        """Prend une d√©cision de trading bas√©e sur les signaux"""

        # Pr√©parer les signaux pour la fusion (3 composantes)
        signals = {"price": price_signal, "sentiment": sentiment_signal}

        if prediction_signal is not None:
            signals["prediction"] = prediction_signal  # ‚Üê Signal LSTM

        # Fusionner les signaux
        fused_signal = self.fusion.fuse_signals(signals)

        # Prendre la d√©cision
        decision = "HOLD"
        confidence = 0.0

        if fused_signal > self.buy_threshold:
            decision = "BUY"
            confidence = min(fused_signal, 1.0)
        elif fused_signal < self.sell_threshold:
            decision = "SELL"
            confidence = min(abs(fused_signal), 1.0)
        else:
            decision = "HOLD"
            confidence = 1.0 - abs(fused_signal)

        # Cr√©er la d√©cision
        # R√©cup√©rer le prix actuel
        if prices is not None and not prices.empty:
            close_col = 'Close' if 'Close' in prices.columns else 'close'
            current_price = float(prices[close_col].iloc[-1])
        else:
            # Fallback: r√©cup√©rer depuis le fichier
            price_df = self.get_latest_prices(ticker)
            if price_df is not None and not price_df.empty:
                close_col = 'Close' if 'Close' in price_df.columns else 'close'
                current_price = float(price_df[close_col].iloc[-1])
            else:
                current_price = 0.0
        
        decision_data = {
            "ticker": ticker,
            "timestamp": datetime.now(timezone.utc).isoformat(),
            "decision": decision,
            "confidence": confidence,
            "fused_signal": fused_signal,
            "current_price": current_price,
            "signals": signals,
            "thresholds": {"buy": self.buy_threshold, "sell": self.sell_threshold, "hold": self.hold_confidence},
        }

        logger.info(f"ü§ñ D√©cision {ticker}: {decision} (confiance: {confidence:.3f}, signal: {fused_signal:.3f}, prix: ${current_price:.2f})")
        
        # Sauvegarder comme d√©cision en attente de validation (15 minutes) - TOUTES les d√©cisions
        validation_result = self.decision_validator.validate_decision(
            ticker=ticker,
            decision=decision,
            fusion_score=fused_signal,
            current_price=current_price,
            timestamp=datetime.now(timezone.utc)
        )
        if decision != "HOLD":
            logger.info(f"‚è≥ D√©cision en attente de validation: {validation_result.get('message', 'N/A')}")

        return decision_data

    def process_ticker(self, ticker: str) -> Optional[Dict[str, Any]]:
        """Traite un ticker et g√©n√®re une d√©cision de trading"""
        logger.info(f"\nüìä Traitement {ticker}")

        # R√©cup√©rer les donn√©es
        prices = self.get_latest_prices(ticker)
        if prices is None:
            logger.warning(f"‚ö†Ô∏è Impossible de traiter {ticker}: pas de donn√©es de prix")
            return None

        # Calculer les signaux
        price_signal = self.calculate_price_signal(prices)
        sentiment_signal = self.get_latest_sentiment(ticker)
        prediction_signal = self.get_lstm_prediction(ticker, prices)

        # Prendre la d√©cision
        decision = self.make_trading_decision(ticker, price_signal, sentiment_signal, prediction_signal, prices)

        return decision

    def _is_decision_window(self) -> bool:
        """V√©rifie si on est dans une fen√™tre de d√©cision valide (15 minutes)"""
        try:
            import pytz

            # Timezone US Eastern (g√®re automatiquement EST/EDT)
            us_eastern = pytz.timezone("US/Eastern")
            now_est = datetime.now(us_eastern)

            # Heures de march√© US (9:30-16:00)
            market_open = now_est.replace(hour=9, minute=30, second=0, microsecond=0)
            market_close = now_est.replace(hour=16, minute=0, second=0, microsecond=0)

            # V√©rifier si c'est un jour de semaine
            is_weekday = now_est.weekday() < 5  # 0-4 = lundi-vendredi

            if not is_weekday:
                return False

            if not (market_open <= now_est <= market_close):
                return False

            # V√©rifier si on est dans une fen√™tre de 15 minutes
            current_minute = now_est.minute
            return current_minute in [30, 45, 0]  # 9:30, 9:45, 10:00, 10:15, etc.

        except ImportError:
            # Fallback si pytz n'est pas disponible
            from datetime import timedelta, timezone

            edt = timezone(timedelta(hours=-4))
            now_est = datetime.now(edt)

            # Heures de march√© US (9:30-16:00 EDT)
            market_open = now_est.replace(hour=9, minute=30, second=0, microsecond=0)
            market_close = now_est.replace(hour=16, minute=0, second=0, microsecond=0)

            # V√©rifier si c'est un jour de semaine
            is_weekday = now_est.weekday() < 5  # 0-4 = lundi-vendredi

            if not is_weekday:
                return False

            if not (market_open <= now_est <= market_close):
                return False

            # V√©rifier si on est dans une fen√™tre de 15 minutes
            current_minute = now_est.minute
            return current_minute in [30, 45, 0]  # 9:30, 9:45, 10:00, 10:15, etc.

    def run_trading_pipeline(self, force: bool = False) -> Dict[str, Any]:
        """Ex√©cute le pipeline de trading complet"""
        logger.info("ü§ñ === PIPELINE DE TRADING ===")
        start_time = datetime.now()

        # Valider les d√©cisions en attente AVANT de g√©n√©rer de nouvelles d√©cisions
        logger.info("üîç V√©rification des d√©cisions en attente de validation...")
        validated_count = self.decision_validator.process_pending_validations()
        if validated_count > 0:
            logger.info(f"‚úÖ {validated_count} d√©cision(s) valid√©e(s)")

        # V√©rifier si on est dans une fen√™tre de d√©cision valide (15 minutes)
        if not force and not self._is_decision_window():
            logger.info("‚è∞ Pas dans une fen√™tre de d√©cision (15min) - Attente")
            return {
                "success": True,
                "decisions": [],
                "tickers_processed": 0,
                "duration": (datetime.now() - start_time).total_seconds(),
            }
        
        if force:
            logger.info("üîß Mode FORCE activ√© - G√©n√©ration d√©cision imm√©diate")

        decisions = []
        successful_tickers = 0

        for ticker in self.tickers:
            try:
                decision = self.process_ticker(ticker)
                if decision:
                    decisions.append(decision)
                    successful_tickers += 1
            except Exception as e:
                logger.error(f"‚ùå Erreur traitement {ticker}: {e}")
                continue

        # Mettre √† jour l'√©tat de trading
        self.trading_state["last_update"] = datetime.now().isoformat()
        self.trading_state["decisions"].extend(decisions)

        # Garder seulement les 100 derni√®res d√©cisions
        if len(self.trading_state["decisions"]) > 100:
            self.trading_state["decisions"] = self.trading_state["decisions"][-100:]

        # Sauvegarder l'√©tat
        self._save_trading_state()

        # Sauvegarder les d√©cisions dans un fichier s√©par√©
        self._save_decisions_log(decisions)

        # Calculer les m√©triques
        duration = (datetime.now() - start_time).total_seconds()

        result = {
            "timestamp": datetime.now().isoformat(),
            "tickers_processed": successful_tickers,
            "total_tickers": len(self.tickers),
            "decisions": decisions,
            "duration_seconds": duration,
            "status": "success" if successful_tickers > 0 else "no_data",
        }

        logger.info(f"\nüìä R√©sum√© du pipeline:")
        logger.info(f"   Tickers trait√©s: {successful_tickers}/{len(self.tickers)}")
        logger.info(f"   D√©cisions g√©n√©r√©es: {len(decisions)}")
        logger.info(f"   Dur√©e: {duration:.1f}s")

        return result

    def _save_decisions_log(self, decisions: List[Dict[str, Any]]):
        """Sauvegarde le log des d√©cisions dans un fichier unifi√©"""
        if not decisions:
            return

        # Fichier unifi√© pour toutes les d√©cisions
        log_path = CONSTANTS.DATA_ROOT / "trading" / "decisions_log" / "trading_decisions.json"
        log_path.parent.mkdir(parents=True, exist_ok=True)

        # Charger les d√©cisions existantes
        existing_decisions = []
        if log_path.exists():
            try:
                with open(log_path, "r") as f:
                    existing_decisions = json.load(f)
                logger.debug(f"üìä D√©cisions existantes: {len(existing_decisions)}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erreur lecture d√©cisions existantes: {e}")

        # Fusionner les nouvelles d√©cisions
        all_decisions = existing_decisions + decisions

        # Garder seulement les 1000 derni√®res d√©cisions pour √©viter la surcharge
        if len(all_decisions) > 1000:
            all_decisions = all_decisions[-1000:]
            logger.info(
                f"üìä D√©cisions limit√©es √† 1000 (supprim√© {len(existing_decisions) + len(decisions) - 1000} anciennes)"
            )

        try:
            with open(log_path, "w") as f:
                json.dump(all_decisions, f, indent=2)
            logger.debug(f"üíæ Log des d√©cisions sauvegard√©: {log_path} ({len(all_decisions)} total)")
        except Exception as e:
            logger.error(f"‚ùå Erreur sauvegarde log d√©cisions: {e}")


def main():
    """Fonction principale"""
    import sys
    force = "--force" in sys.argv
    
    logger.info("üöÄ D√©marrage du pipeline de trading")
    if force:
        logger.info("üîß Mode FORCE d√©tect√©")

    try:
        pipeline = TradingPipeline()
        result = pipeline.run_trading_pipeline(force=force)

        if result.get("success", False):
            logger.info("‚úÖ Pipeline de trading termin√© avec succ√®s")
            logger.info(f"   D√©cisions: {len(result.get('decisions', []))}")
            return 0
        else:
            logger.warning("‚ö†Ô∏è Pipeline de trading termin√© sans donn√©es")
            return 1

    except Exception as e:
        logger.error(f"‚ùå Erreur lors du pipeline de trading: {e}")
        return 1


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
