#!/usr/bin/env python3
"""
üìä Mise √† jour des donn√©es yfinance
T√©l√©charge les donn√©es historiques √† jour pour SPY et NVDA
"""

import sys
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

import yfinance as yf
import pandas as pd
from datetime import datetime
from loguru import logger

from src.constants import CONSTANTS


def update_yfinance_data(ticker: str) -> bool:
    """
    T√©l√©charge et sauvegarde les donn√©es yfinance √† jour

    Args:
        ticker: Symbole de l'action (SPY, NVDA, etc.)

    Returns:
        True si succ√®s, False sinon
    """
    try:
        logger.info(f"üìà T√©l√©chargement {ticker} depuis 1999-01-01...")

        # T√©l√©charger les donn√©es
        stock = yf.Ticker(ticker)
        hist = stock.history(start="1999-01-01", interval="1d")

        if hist.empty:
            logger.error(f"‚ùå Aucune donn√©e pour {ticker}")
            return False

        # Nettoyer les donn√©es
        hist = hist.reset_index()
        hist["ticker"] = ticker
        hist = hist.rename(
            columns={
                "Date": "date",
                "Open": "open",
                "High": "high",
                "Low": "low",
                "Close": "close",
                "Volume": "volume",
            }
        )
        hist = hist[["ticker", "date", "open", "high", "low", "close", "volume"]]
        hist = hist.dropna()

        # Cr√©er le nom de fichier avec format ann√©e
        year_from = hist["date"].min().year
        year_to = hist["date"].max().year
        filename = f"{ticker}_{year_from}_{year_to}.parquet"

        # Sauvegarder
        yfinance_dir = CONSTANTS.DATA_ROOT / "historical" / "yfinance"
        yfinance_dir.mkdir(parents=True, exist_ok=True)

        filepath = yfinance_dir / filename
        hist.to_parquet(filepath, index=False)

        logger.info(f"‚úÖ {ticker} sauvegard√©: {filename}")
        logger.info(f"   P√©riode: {year_from} √† {year_to}")
        logger.info(f"   Jours: {len(hist)}")
        logger.info(f"   Dernier prix: ${hist['close'].iloc[-1]:.2f} ({hist['date'].iloc[-1].strftime('%Y-%m-%d')})")

        return True

    except Exception as e:
        logger.error(f"‚ùå Erreur {ticker}: {e}")
        return False


def main():
    """Fonction principale"""
    logger.info("üöÄ D√©marrage mise √† jour yfinance")

    success_count = 0
    total_tickers = len(CONSTANTS.TICKERS)

    for ticker in CONSTANTS.TICKERS:
        logger.info(f"\n{'='*50}")
        logger.info(f"üìä {ticker}")
        logger.info(f"{'='*50}")

        if update_yfinance_data(ticker):
            success_count += 1

    # R√©sum√©
    logger.info(f"\n{'='*50}")
    logger.info("üéØ R√âSUM√â")
    logger.info(f"{'='*50}")
    logger.info(f"Succ√®s: {success_count}/{total_tickers}")

    if success_count == total_tickers:
        logger.info("üéâ Toutes les donn√©es sont √† jour!")
        return 0
    elif success_count > 0:
        logger.warning(f"‚ö†Ô∏è {total_tickers - success_count} ticker(s) en √©chec")
        return 1
    else:
        logger.error("‚ùå Tous les t√©l√©chargements ont √©chou√©")
        return 1


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
