# Sentinel2 - Syst√®me de Trading Algorithmique
# Makefile pour la gestion compl√®te de l'application

.PHONY: help install start stop restart clean status logs

# Variables
APP_NAME = sentinel2
STREAMLIT_PORT = 8501
OLLAMA_PORT = 11434
VENV_DIR = .venv

# Couleurs pour les messages
GREEN = \033[0;32m
YELLOW = \033[1;33m
RED = \033[0;31m
NC = \033[0m # No Color

help: ## Afficher l'aide
	@echo "$(GREEN)üöÄ Sentinel2 - Syst√®me de Trading Algorithmique$(NC)"
	@echo ""
	@echo "$(YELLOW)Commandes disponibles:$(NC)"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  $(GREEN)%-15s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST)

install: ## Installer les d√©pendances
	@echo "$(YELLOW)üì¶ Installation des d√©pendances...$(NC)"
	uv sync
	@echo "$(GREEN)‚úÖ D√©pendances install√©es$(NC)"

start: ## D√©marrer l'application COMPL√àTE (Ollama + Prefect + Worker + Streamlit)
	@echo "$(YELLOW)üöÄ D√©marrage COMPLET de Sentinel2...$(NC)"
	@make start-ollama
	@echo "$(YELLOW)‚è≥ Attente d√©marrage Ollama...$(NC)"
	@sleep 3
	@make start-prefect-server
	@echo "$(YELLOW)‚è≥ Attente d√©marrage Prefect...$(NC)"
	@sleep 5
	@make start-prefect-worker
	@echo "$(YELLOW)‚è≥ Attente d√©marrage worker...$(NC)"
	@sleep 3
	@make start-streamlit
	@echo "$(GREEN)‚úÖ Application d√©marr√©e !$(NC)"
	@echo "$(GREEN)   Streamlit: http://localhost:$(STREAMLIT_PORT)$(NC)"
	@echo "$(GREEN)   Prefect:   http://localhost:4200$(NC)"
	@echo "$(YELLOW)   Note: Orchestration g√©r√©e par Prefect Worker$(NC)"

start-ollama: ## D√©marrer Ollama en arri√®re-plan
	@echo "$(YELLOW)üß† D√©marrage d'Ollama...$(NC)"
	@if ! pgrep -f "ollama serve" > /dev/null; then \
		ollama serve > /dev/null 2>&1 & \
		echo "$(GREEN)‚úÖ Ollama d√©marr√©$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è Ollama d√©j√† en cours d'ex√©cution$(NC)"; \
	fi

start-prefect-server: ## D√©marrer le serveur Prefect avec chemin direct
	@echo "$(YELLOW)üöÄ D√©marrage serveur Prefect...$(NC)"
	@if ! lsof -i :4200 > /dev/null 2>&1; then \
		nohup .venv/bin/prefect server start --host 0.0.0.0 --port 4200 > data/logs/prefect_server.log 2>&1 & \
		echo "$(GREEN)‚úÖ Prefect serveur d√©marr√©$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è Prefect serveur d√©j√† en cours$(NC)"; \
	fi

start-prefect-worker: ## D√©marrer le worker Prefect avec chemin direct
	@echo "$(YELLOW)ü§ñ D√©marrage worker Prefect...$(NC)"
	@if ! pgrep -f "prefect worker start --pool sentinel" > /dev/null; then \
		PREFECT_API_URL=http://localhost:4200/api nohup .venv/bin/prefect worker start --pool sentinel > data/logs/prefect_worker.log 2>&1 & \
		echo "$(GREEN)‚úÖ Prefect worker d√©marr√©$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è Worker d√©j√† en cours d'ex√©cution$(NC)"; \
	fi

# Orchestrateur supprim√© - remplac√© par Prefect Worker

start-streamlit: ## D√©marrer Streamlit
	@echo "$(YELLOW)üìä D√©marrage de Streamlit...$(NC)"
	@if ! pgrep -f "streamlit run" > /dev/null; then \
		uv run streamlit run src/gui/main.py --server.port $(STREAMLIT_PORT) > /dev/null 2>&1 & \
		echo "$(GREEN)‚úÖ Streamlit d√©marr√©$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è Streamlit d√©j√† en cours d'ex√©cution$(NC)"; \
	fi

stop: ## Arr√™ter l'application COMPL√àTE
	@echo "$(YELLOW)üõë Arr√™t COMPLET de Sentinel2...$(NC)"
	@make stop-streamlit
	@make stop-prefect
	@make stop-ollama
	@echo "$(GREEN)‚úÖ Application compl√®tement arr√™t√©e$(NC)"

stop-streamlit: ## Arr√™ter Streamlit
	@echo "$(YELLOW)üìä Arr√™t de Streamlit...$(NC)"
	@pkill -f "streamlit run" || true
	@echo "$(GREEN)‚úÖ Streamlit arr√™t√©$(NC)"

# stop-orchestrator supprim√© - non n√©cessaire

stop-prefect: ## Arr√™ter Prefect (serveur + worker)
	@echo "$(YELLOW)üöÄ Arr√™t de Prefect...$(NC)"
	@pkill -f "prefect server" || true
	@pkill -f "prefect worker" || true
	@echo "$(GREEN)‚úÖ Prefect arr√™t√©$(NC)"

stop-ollama: ## Arr√™ter Ollama
	@echo "$(YELLOW)üß† Arr√™t d'Ollama...$(NC)"
	@pkill -f "ollama serve" || true
	@echo "$(GREEN)‚úÖ Ollama arr√™t√©$(NC)"

restart: ## Red√©marrer l'application
	@echo "$(YELLOW)üîÑ Red√©marrage de Sentinel2...$(NC)"
	@make stop
	@sleep 2
	@make start
	@echo "$(GREEN)‚úÖ Application red√©marr√©e$(NC)"

status: ## V√©rifier le statut de l'application COMPL√àTE
	@echo "$(YELLOW)üìä Statut de Sentinel2:$(NC)"
	@echo ""
	@echo "$(YELLOW)Prefect Server:$(NC)"
	@if lsof -i :4200 > /dev/null 2>&1; then \
		echo "  $(GREEN)‚úÖ En cours d'ex√©cution$(NC)"; \
		echo "  $(GREEN)   Dashboard: http://localhost:4200$(NC)"; \
	else \
		echo "  $(RED)‚ùå Arr√™t√©$(NC)"; \
	fi
	@echo ""
	@echo "$(YELLOW)Prefect Worker:$(NC)"
	@if pgrep -f "prefect worker" > /dev/null; then \
		echo "  $(GREEN)‚úÖ En cours d'ex√©cution$(NC)"; \
	else \
		echo "  $(RED)‚ùå Arr√™t√© (REQUIS pour ex√©cuter flows!)$(NC)"; \
	fi
	@echo ""
	@echo "$(YELLOW)Streamlit:$(NC)"
	@if pgrep -f "streamlit run" > /dev/null; then \
		echo "  $(GREEN)‚úÖ En cours d'ex√©cution$(NC)"; \
		echo "  $(GREEN)   URL: http://localhost:$(STREAMLIT_PORT)$(NC)"; \
	else \
		echo "  $(RED)‚ùå Arr√™t√©$(NC)"; \
	fi
	@echo ""
	@echo "$(YELLOW)Ollama:$(NC)"
	@if pgrep -f "ollama serve" > /dev/null; then \
		echo "  $(GREEN)‚úÖ En cours d'ex√©cution$(NC)"; \
		echo "  $(GREEN)   Port: $(OLLAMA_PORT)$(NC)"; \
	else \
		echo "  $(RED)‚ùå Arr√™t√©$(NC)"; \
	fi

logs: ## Afficher les logs Prefect Worker
	@echo "$(YELLOW)üìã Logs Prefect Worker:$(NC)"
	@if [ -f "data/logs/prefect_worker.log" ]; then \
		tail -f data/logs/prefect_worker.log; \
	else \
		echo "$(RED)‚ùå Aucun fichier de log trouv√©$(NC)"; \
	fi

clean: ## Nettoyer les caches et fichiers temporaires
	@echo "$(YELLOW)üßπ Nettoyage de Sentinel2...$(NC)"
	@find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
	@find . -name "*.pyc" -delete 2>/dev/null || true
	@rm -rf .pytest_cache 2>/dev/null || true
	@echo "$(GREEN)‚úÖ Nettoyage termin√©$(NC)"

clean-all: clean ## Nettoyage complet (supprime .venv)
	@echo "$(YELLOW)üßπ Nettoyage complet...$(NC)"
	@rm -rf $(VENV_DIR) 2>/dev/null || true
	@echo "$(GREEN)‚úÖ Nettoyage complet termin√©$(NC)"

clean-logs: ## Nettoyer les logs et d√©cisions (INTERACTIF)
	@echo "$(YELLOW)üßπ Nettoyage des logs et d√©cisions...$(NC)"
	@bash scripts/clean_logs.sh

dev: ## Mode d√©veloppement (sans Ollama)
	@echo "$(YELLOW)üîß Mode d√©veloppement...$(NC)"
	@make stop
	@make start-streamlit
	@echo "$(GREEN)‚úÖ Mode d√©veloppement activ√©$(NC)"

prod: ## Mode production (avec Ollama)
	@echo "$(YELLOW)üöÄ Mode production...$(NC)"
	@make start
	@echo "$(GREEN)‚úÖ Mode production activ√©$(NC)"

prefect-deploy: ## D√©ployer les flows Prefect depuis prefect.yaml
	@echo "$(YELLOW)üöÄ D√©ploiement flows depuis prefect.yaml...$(NC)"
	@PREFECT_API_URL=http://localhost:4200/api uv run prefect work-pool create sentinel --type process || echo "$(YELLOW)‚ö†Ô∏è Work pool d√©j√† cr√©√©$(NC)"
	@PREFECT_API_URL=http://localhost:4200/api uv run prefect deploy --all
	@echo "$(GREEN)‚úÖ D√©ploiements cr√©√©s$(NC)"

prefect-worker: ## D√©marrer Prefect worker pour le pool sentinel
	@echo "$(YELLOW)ü§ñ D√©marrage worker Prefect (pool sentinel)...$(NC)"
	@PREFECT_API_URL=http://localhost:4200/api uv run prefect worker start --pool sentinel

prefect-ui: ## Ouvrir Prefect UI
	@echo "$(YELLOW)üìä Ouverture Prefect UI...$(NC)"
	@command -v open >/dev/null 2>&1 && open http://localhost:4200 || (command -v xdg-open >/dev/null 2>&1 && xdg-open http://localhost:4200) || echo "Ouvrir manuellement: http://localhost:4200"

test: ## Lancer les tests
	@echo "$(YELLOW)üß™ Lancement des tests...$(NC)"
	uv run python -m pytest tests/ -v
	@echo "$(GREEN)‚úÖ Tests termin√©s$(NC)"

check-prod: ## V√©rifier configuration production
	@bash scripts/check_production.sh

check-all: ## V√©rification compl√®te (services + logs + erreurs)
	@echo "$(YELLOW)üîç V√âRIFICATION COMPL√àTE SENTINEL2$(NC)"
	@echo "========================================="
	@echo ""
	@echo "1Ô∏è‚É£ STATUT SERVICES"
	@make status
	@echo ""
	@echo "2Ô∏è‚É£ LOGS R√âCENTS (derni√®res erreurs)"
	@echo "-----------------------------------"
	@if [ -f "data/logs/prefect_worker.log" ]; then \
		echo "$(YELLOW)Prefect Worker:$(NC)"; \
		grep -i "error\|exception\|failed" data/logs/prefect_worker.log | tail -5 || echo "  $(GREEN)‚úÖ Pas d'erreur$(NC)"; \
	fi
	@echo ""
	@echo ""
	@if [ -f "data/logs/trading_decisions.log" ]; then \
		echo "$(YELLOW)Trading:$(NC)"; \
		grep -i "error\|exception" data/logs/trading_decisions.log | tail -5 || echo "  $(GREEN)‚úÖ Pas d'erreur$(NC)"; \
	fi
	@echo ""
	@echo "3Ô∏è‚É£ FLOWS PREFECT R√âCENTS"
	@echo "------------------------"
	@uv run prefect flow-run ls --limit 3 2>/dev/null || echo "  $(RED)‚ùå Impossible de lister les flows$(NC)"
	@echo ""
	@echo "========================================="
	@echo "$(GREEN)‚úÖ V√©rification termin√©e$(NC)"

# Commande par d√©faut
.DEFAULT_GOAL := help
